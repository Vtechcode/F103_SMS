
F103_TEXT_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000374c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003954  08003954  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003954  08003954  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800395c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  2000005c  080039b8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  080039b8  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000764d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016c3  00000000  00000000  00027715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00028dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053e  00000000  00000000  000294b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d5e  00000000  00000000  000299f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008b27  00000000  00000000  00040754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008227a  00000000  00000000  0004927b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fc0  00000000  00000000  000cb4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cd4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003840 	.word	0x08003840

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003840 	.word	0x08003840

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <checkNetwork>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int checkNetwork()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	memset(AtCommand, 0, strlen(AtCommand));
 8000160:	486e      	ldr	r0, [pc, #440]	; (800031c <checkNetwork+0x1c0>)
 8000162:	f7ff fff3 	bl	800014c <strlen>
 8000166:	4603      	mov	r3, r0
 8000168:	461a      	mov	r2, r3
 800016a:	2100      	movs	r1, #0
 800016c:	486b      	ldr	r0, [pc, #428]	; (800031c <checkNetwork+0x1c0>)
 800016e:	f002 febf 	bl	8002ef0 <memset>
	memset(Reply, 0, strlen((char*)Reply));
 8000172:	486b      	ldr	r0, [pc, #428]	; (8000320 <checkNetwork+0x1c4>)
 8000174:	f7ff ffea 	bl	800014c <strlen>
 8000178:	4603      	mov	r3, r0
 800017a:	461a      	mov	r2, r3
 800017c:	2100      	movs	r1, #0
 800017e:	4868      	ldr	r0, [pc, #416]	; (8000320 <checkNetwork+0x1c4>)
 8000180:	f002 feb6 	bl	8002ef0 <memset>
	sprintf(AtCommand, "AT\r\n");
 8000184:	4967      	ldr	r1, [pc, #412]	; (8000324 <checkNetwork+0x1c8>)
 8000186:	4865      	ldr	r0, [pc, #404]	; (800031c <checkNetwork+0x1c0>)
 8000188:	f002 fe92 	bl	8002eb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 800018c:	4863      	ldr	r0, [pc, #396]	; (800031c <checkNetwork+0x1c0>)
 800018e:	f7ff ffdd 	bl	800014c <strlen>
 8000192:	4603      	mov	r3, r0
 8000194:	b29a      	uxth	r2, r3
 8000196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019a:	4960      	ldr	r1, [pc, #384]	; (800031c <checkNetwork+0x1c0>)
 800019c:	4862      	ldr	r0, [pc, #392]	; (8000328 <checkNetwork+0x1cc>)
 800019e:	f002 f82b 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80001a2:	485e      	ldr	r0, [pc, #376]	; (800031c <checkNetwork+0x1c0>)
 80001a4:	f7ff ffd2 	bl	800014c <strlen>
 80001a8:	4603      	mov	r3, r0
 80001aa:	b29a      	uxth	r2, r3
 80001ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b0:	495a      	ldr	r1, [pc, #360]	; (800031c <checkNetwork+0x1c0>)
 80001b2:	485e      	ldr	r0, [pc, #376]	; (800032c <checkNetwork+0x1d0>)
 80001b4:	f002 f820 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 80001b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001bc:	2250      	movs	r2, #80	; 0x50
 80001be:	4958      	ldr	r1, [pc, #352]	; (8000320 <checkNetwork+0x1c4>)
 80001c0:	4859      	ldr	r0, [pc, #356]	; (8000328 <checkNetwork+0x1cc>)
 80001c2:	f002 f8a4 	bl	800230e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 80001c6:	4856      	ldr	r0, [pc, #344]	; (8000320 <checkNetwork+0x1c4>)
 80001c8:	f7ff ffc0 	bl	800014c <strlen>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	4952      	ldr	r1, [pc, #328]	; (8000320 <checkNetwork+0x1c4>)
 80001d6:	4855      	ldr	r0, [pc, #340]	; (800032c <checkNetwork+0x1d0>)
 80001d8:	f002 f80e 	bl	80021f8 <HAL_UART_Transmit>
	if(strstr((char *)Reply,"OK"))
 80001dc:	4954      	ldr	r1, [pc, #336]	; (8000330 <checkNetwork+0x1d4>)
 80001de:	4850      	ldr	r0, [pc, #320]	; (8000320 <checkNetwork+0x1c4>)
 80001e0:	f002 fe8e 	bl	8002f00 <strstr>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	f000 8095 	beq.w	8000316 <checkNetwork+0x1ba>
	  {
		//ATisOK = 1;
		//HAL_UART_Transmit(&huart3,(uint8_t *)rx_buffer,strlen((char *)rx_buffer),1000);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f2:	4850      	ldr	r0, [pc, #320]	; (8000334 <checkNetwork+0x1d8>)
 80001f4:	f001 fb88 	bl	8001908 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 80001f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001fc:	f000 feba 	bl	8000f74 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000206:	484b      	ldr	r0, [pc, #300]	; (8000334 <checkNetwork+0x1d8>)
 8000208:	f001 fb7e 	bl	8001908 <HAL_GPIO_WritePin>
	else
	{
		return 0;
	}

	memset(AtCommand, 0, strlen(AtCommand));
 800020c:	4843      	ldr	r0, [pc, #268]	; (800031c <checkNetwork+0x1c0>)
 800020e:	f7ff ff9d 	bl	800014c <strlen>
 8000212:	4603      	mov	r3, r0
 8000214:	461a      	mov	r2, r3
 8000216:	2100      	movs	r1, #0
 8000218:	4840      	ldr	r0, [pc, #256]	; (800031c <checkNetwork+0x1c0>)
 800021a:	f002 fe69 	bl	8002ef0 <memset>
	memset(Reply, 0, strlen((char*)Reply));
 800021e:	4840      	ldr	r0, [pc, #256]	; (8000320 <checkNetwork+0x1c4>)
 8000220:	f7ff ff94 	bl	800014c <strlen>
 8000224:	4603      	mov	r3, r0
 8000226:	461a      	mov	r2, r3
 8000228:	2100      	movs	r1, #0
 800022a:	483d      	ldr	r0, [pc, #244]	; (8000320 <checkNetwork+0x1c4>)
 800022c:	f002 fe60 	bl	8002ef0 <memset>
	sprintf(AtCommand, "AT+CPIN=?\r\n");
 8000230:	4941      	ldr	r1, [pc, #260]	; (8000338 <checkNetwork+0x1dc>)
 8000232:	483a      	ldr	r0, [pc, #232]	; (800031c <checkNetwork+0x1c0>)
 8000234:	f002 fe3c 	bl	8002eb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000238:	4838      	ldr	r0, [pc, #224]	; (800031c <checkNetwork+0x1c0>)
 800023a:	f7ff ff87 	bl	800014c <strlen>
 800023e:	4603      	mov	r3, r0
 8000240:	b29a      	uxth	r2, r3
 8000242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000246:	4935      	ldr	r1, [pc, #212]	; (800031c <checkNetwork+0x1c0>)
 8000248:	4837      	ldr	r0, [pc, #220]	; (8000328 <checkNetwork+0x1cc>)
 800024a:	f001 ffd5 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 800024e:	4833      	ldr	r0, [pc, #204]	; (800031c <checkNetwork+0x1c0>)
 8000250:	f7ff ff7c 	bl	800014c <strlen>
 8000254:	4603      	mov	r3, r0
 8000256:	b29a      	uxth	r2, r3
 8000258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800025c:	492f      	ldr	r1, [pc, #188]	; (800031c <checkNetwork+0x1c0>)
 800025e:	4833      	ldr	r0, [pc, #204]	; (800032c <checkNetwork+0x1d0>)
 8000260:	f001 ffca 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 8000264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000268:	2250      	movs	r2, #80	; 0x50
 800026a:	492d      	ldr	r1, [pc, #180]	; (8000320 <checkNetwork+0x1c4>)
 800026c:	482e      	ldr	r0, [pc, #184]	; (8000328 <checkNetwork+0x1cc>)
 800026e:	f002 f84e 	bl	800230e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 8000272:	482b      	ldr	r0, [pc, #172]	; (8000320 <checkNetwork+0x1c4>)
 8000274:	f7ff ff6a 	bl	800014c <strlen>
 8000278:	4603      	mov	r3, r0
 800027a:	b29a      	uxth	r2, r3
 800027c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000280:	4927      	ldr	r1, [pc, #156]	; (8000320 <checkNetwork+0x1c4>)
 8000282:	482a      	ldr	r0, [pc, #168]	; (800032c <checkNetwork+0x1d0>)
 8000284:	f001 ffb8 	bl	80021f8 <HAL_UART_Transmit>

	memset(AtCommand, 0, strlen(AtCommand));
 8000288:	4824      	ldr	r0, [pc, #144]	; (800031c <checkNetwork+0x1c0>)
 800028a:	f7ff ff5f 	bl	800014c <strlen>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	4821      	ldr	r0, [pc, #132]	; (800031c <checkNetwork+0x1c0>)
 8000296:	f002 fe2b 	bl	8002ef0 <memset>
	memset(Reply, 0, strlen((char*)Reply));
 800029a:	4821      	ldr	r0, [pc, #132]	; (8000320 <checkNetwork+0x1c4>)
 800029c:	f7ff ff56 	bl	800014c <strlen>
 80002a0:	4603      	mov	r3, r0
 80002a2:	461a      	mov	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	481e      	ldr	r0, [pc, #120]	; (8000320 <checkNetwork+0x1c4>)
 80002a8:	f002 fe22 	bl	8002ef0 <memset>
	sprintf(AtCommand, "AT+CPIN?\r\n");
 80002ac:	4923      	ldr	r1, [pc, #140]	; (800033c <checkNetwork+0x1e0>)
 80002ae:	481b      	ldr	r0, [pc, #108]	; (800031c <checkNetwork+0x1c0>)
 80002b0:	f002 fdfe 	bl	8002eb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80002b4:	4819      	ldr	r0, [pc, #100]	; (800031c <checkNetwork+0x1c0>)
 80002b6:	f7ff ff49 	bl	800014c <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29a      	uxth	r2, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	4916      	ldr	r1, [pc, #88]	; (800031c <checkNetwork+0x1c0>)
 80002c4:	4818      	ldr	r0, [pc, #96]	; (8000328 <checkNetwork+0x1cc>)
 80002c6:	f001 ff97 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80002ca:	4814      	ldr	r0, [pc, #80]	; (800031c <checkNetwork+0x1c0>)
 80002cc:	f7ff ff3e 	bl	800014c <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	4910      	ldr	r1, [pc, #64]	; (800031c <checkNetwork+0x1c0>)
 80002da:	4814      	ldr	r0, [pc, #80]	; (800032c <checkNetwork+0x1d0>)
 80002dc:	f001 ff8c 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 80002e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e4:	2250      	movs	r2, #80	; 0x50
 80002e6:	490e      	ldr	r1, [pc, #56]	; (8000320 <checkNetwork+0x1c4>)
 80002e8:	480f      	ldr	r0, [pc, #60]	; (8000328 <checkNetwork+0x1cc>)
 80002ea:	f002 f810 	bl	800230e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 80002ee:	480c      	ldr	r0, [pc, #48]	; (8000320 <checkNetwork+0x1c4>)
 80002f0:	f7ff ff2c 	bl	800014c <strlen>
 80002f4:	4603      	mov	r3, r0
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fc:	4908      	ldr	r1, [pc, #32]	; (8000320 <checkNetwork+0x1c4>)
 80002fe:	480b      	ldr	r0, [pc, #44]	; (800032c <checkNetwork+0x1d0>)
 8000300:	f001 ff7a 	bl	80021f8 <HAL_UART_Transmit>

	if(strstr((char *)Reply,"READY"))
 8000304:	490e      	ldr	r1, [pc, #56]	; (8000340 <checkNetwork+0x1e4>)
 8000306:	4806      	ldr	r0, [pc, #24]	; (8000320 <checkNetwork+0x1c4>)
 8000308:	f002 fdfa 	bl	8002f00 <strstr>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	f000 8122 	beq.w	8000558 <checkNetwork+0x3fc>
 8000314:	e016      	b.n	8000344 <checkNetwork+0x1e8>
		return 0;
 8000316:	2300      	movs	r3, #0
 8000318:	e11f      	b.n	800055a <checkNetwork+0x3fe>
 800031a:	bf00      	nop
 800031c:	20000218 	.word	0x20000218
 8000320:	20000268 	.word	0x20000268
 8000324:	08003858 	.word	0x08003858
 8000328:	20000078 	.word	0x20000078
 800032c:	200000c0 	.word	0x200000c0
 8000330:	08003860 	.word	0x08003860
 8000334:	40011000 	.word	0x40011000
 8000338:	08003864 	.word	0x08003864
 800033c:	08003870 	.word	0x08003870
 8000340:	0800387c 	.word	0x0800387c
		  {
			//ATisOK = 1;
			//HAL_UART_Transmit(&huart3,(uint8_t *)rx_buffer,strlen((char *)rx_buffer),1000);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	4885      	ldr	r0, [pc, #532]	; (8000560 <checkNetwork+0x404>)
 800034c:	f001 fadc 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f000 fe0e 	bl	8000f74 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4880      	ldr	r0, [pc, #512]	; (8000560 <checkNetwork+0x404>)
 8000360:	f001 fad2 	bl	8001908 <HAL_GPIO_WritePin>
		else
		{
			return 0;
		}

	memset(AtCommand, 0, strlen(AtCommand));
 8000364:	487f      	ldr	r0, [pc, #508]	; (8000564 <checkNetwork+0x408>)
 8000366:	f7ff fef1 	bl	800014c <strlen>
 800036a:	4603      	mov	r3, r0
 800036c:	461a      	mov	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	487c      	ldr	r0, [pc, #496]	; (8000564 <checkNetwork+0x408>)
 8000372:	f002 fdbd 	bl	8002ef0 <memset>
	memset(Reply, 0, strlen((char*)Reply));
 8000376:	487c      	ldr	r0, [pc, #496]	; (8000568 <checkNetwork+0x40c>)
 8000378:	f7ff fee8 	bl	800014c <strlen>
 800037c:	4603      	mov	r3, r0
 800037e:	461a      	mov	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	4879      	ldr	r0, [pc, #484]	; (8000568 <checkNetwork+0x40c>)
 8000384:	f002 fdb4 	bl	8002ef0 <memset>
	sprintf(AtCommand, "AT+CIMI=?\r\n");
 8000388:	4978      	ldr	r1, [pc, #480]	; (800056c <checkNetwork+0x410>)
 800038a:	4876      	ldr	r0, [pc, #472]	; (8000564 <checkNetwork+0x408>)
 800038c:	f002 fd90 	bl	8002eb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000390:	4874      	ldr	r0, [pc, #464]	; (8000564 <checkNetwork+0x408>)
 8000392:	f7ff fedb 	bl	800014c <strlen>
 8000396:	4603      	mov	r3, r0
 8000398:	b29a      	uxth	r2, r3
 800039a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039e:	4971      	ldr	r1, [pc, #452]	; (8000564 <checkNetwork+0x408>)
 80003a0:	4873      	ldr	r0, [pc, #460]	; (8000570 <checkNetwork+0x414>)
 80003a2:	f001 ff29 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80003a6:	486f      	ldr	r0, [pc, #444]	; (8000564 <checkNetwork+0x408>)
 80003a8:	f7ff fed0 	bl	800014c <strlen>
 80003ac:	4603      	mov	r3, r0
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b4:	496b      	ldr	r1, [pc, #428]	; (8000564 <checkNetwork+0x408>)
 80003b6:	486f      	ldr	r0, [pc, #444]	; (8000574 <checkNetwork+0x418>)
 80003b8:	f001 ff1e 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 80003bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c0:	2250      	movs	r2, #80	; 0x50
 80003c2:	4969      	ldr	r1, [pc, #420]	; (8000568 <checkNetwork+0x40c>)
 80003c4:	486a      	ldr	r0, [pc, #424]	; (8000570 <checkNetwork+0x414>)
 80003c6:	f001 ffa2 	bl	800230e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 80003ca:	4867      	ldr	r0, [pc, #412]	; (8000568 <checkNetwork+0x40c>)
 80003cc:	f7ff febe 	bl	800014c <strlen>
 80003d0:	4603      	mov	r3, r0
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d8:	4963      	ldr	r1, [pc, #396]	; (8000568 <checkNetwork+0x40c>)
 80003da:	4866      	ldr	r0, [pc, #408]	; (8000574 <checkNetwork+0x418>)
 80003dc:	f001 ff0c 	bl	80021f8 <HAL_UART_Transmit>

	memset(AtCommand, 0, strlen(AtCommand));
 80003e0:	4860      	ldr	r0, [pc, #384]	; (8000564 <checkNetwork+0x408>)
 80003e2:	f7ff feb3 	bl	800014c <strlen>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	485d      	ldr	r0, [pc, #372]	; (8000564 <checkNetwork+0x408>)
 80003ee:	f002 fd7f 	bl	8002ef0 <memset>
	memset(Reply, 0, strlen((char*)Reply));
 80003f2:	485d      	ldr	r0, [pc, #372]	; (8000568 <checkNetwork+0x40c>)
 80003f4:	f7ff feaa 	bl	800014c <strlen>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	485a      	ldr	r0, [pc, #360]	; (8000568 <checkNetwork+0x40c>)
 8000400:	f002 fd76 	bl	8002ef0 <memset>
	sprintf(AtCommand, "AT+CIMI\r\n");
 8000404:	495c      	ldr	r1, [pc, #368]	; (8000578 <checkNetwork+0x41c>)
 8000406:	4857      	ldr	r0, [pc, #348]	; (8000564 <checkNetwork+0x408>)
 8000408:	f002 fd52 	bl	8002eb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 800040c:	4855      	ldr	r0, [pc, #340]	; (8000564 <checkNetwork+0x408>)
 800040e:	f7ff fe9d 	bl	800014c <strlen>
 8000412:	4603      	mov	r3, r0
 8000414:	b29a      	uxth	r2, r3
 8000416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800041a:	4952      	ldr	r1, [pc, #328]	; (8000564 <checkNetwork+0x408>)
 800041c:	4854      	ldr	r0, [pc, #336]	; (8000570 <checkNetwork+0x414>)
 800041e:	f001 feeb 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000422:	4850      	ldr	r0, [pc, #320]	; (8000564 <checkNetwork+0x408>)
 8000424:	f7ff fe92 	bl	800014c <strlen>
 8000428:	4603      	mov	r3, r0
 800042a:	b29a      	uxth	r2, r3
 800042c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000430:	494c      	ldr	r1, [pc, #304]	; (8000564 <checkNetwork+0x408>)
 8000432:	4850      	ldr	r0, [pc, #320]	; (8000574 <checkNetwork+0x418>)
 8000434:	f001 fee0 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 8000438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043c:	2250      	movs	r2, #80	; 0x50
 800043e:	494a      	ldr	r1, [pc, #296]	; (8000568 <checkNetwork+0x40c>)
 8000440:	484b      	ldr	r0, [pc, #300]	; (8000570 <checkNetwork+0x414>)
 8000442:	f001 ff64 	bl	800230e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 8000446:	4848      	ldr	r0, [pc, #288]	; (8000568 <checkNetwork+0x40c>)
 8000448:	f7ff fe80 	bl	800014c <strlen>
 800044c:	4603      	mov	r3, r0
 800044e:	b29a      	uxth	r2, r3
 8000450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000454:	4944      	ldr	r1, [pc, #272]	; (8000568 <checkNetwork+0x40c>)
 8000456:	4847      	ldr	r0, [pc, #284]	; (8000574 <checkNetwork+0x418>)
 8000458:	f001 fece 	bl	80021f8 <HAL_UART_Transmit>

	memset(AtCommand, 0, strlen(AtCommand));
 800045c:	4841      	ldr	r0, [pc, #260]	; (8000564 <checkNetwork+0x408>)
 800045e:	f7ff fe75 	bl	800014c <strlen>
 8000462:	4603      	mov	r3, r0
 8000464:	461a      	mov	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	483e      	ldr	r0, [pc, #248]	; (8000564 <checkNetwork+0x408>)
 800046a:	f002 fd41 	bl	8002ef0 <memset>
	memset(Reply, 0, strlen((char*)Reply));
 800046e:	483e      	ldr	r0, [pc, #248]	; (8000568 <checkNetwork+0x40c>)
 8000470:	f7ff fe6c 	bl	800014c <strlen>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	483b      	ldr	r0, [pc, #236]	; (8000568 <checkNetwork+0x40c>)
 800047c:	f002 fd38 	bl	8002ef0 <memset>
	sprintf(AtCommand, "AT+CREG?\r\n");
 8000480:	493e      	ldr	r1, [pc, #248]	; (800057c <checkNetwork+0x420>)
 8000482:	4838      	ldr	r0, [pc, #224]	; (8000564 <checkNetwork+0x408>)
 8000484:	f002 fd14 	bl	8002eb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000488:	4836      	ldr	r0, [pc, #216]	; (8000564 <checkNetwork+0x408>)
 800048a:	f7ff fe5f 	bl	800014c <strlen>
 800048e:	4603      	mov	r3, r0
 8000490:	b29a      	uxth	r2, r3
 8000492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000496:	4933      	ldr	r1, [pc, #204]	; (8000564 <checkNetwork+0x408>)
 8000498:	4835      	ldr	r0, [pc, #212]	; (8000570 <checkNetwork+0x414>)
 800049a:	f001 fead 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 800049e:	4831      	ldr	r0, [pc, #196]	; (8000564 <checkNetwork+0x408>)
 80004a0:	f7ff fe54 	bl	800014c <strlen>
 80004a4:	4603      	mov	r3, r0
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ac:	492d      	ldr	r1, [pc, #180]	; (8000564 <checkNetwork+0x408>)
 80004ae:	4831      	ldr	r0, [pc, #196]	; (8000574 <checkNetwork+0x418>)
 80004b0:	f001 fea2 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 80004b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b8:	2250      	movs	r2, #80	; 0x50
 80004ba:	492b      	ldr	r1, [pc, #172]	; (8000568 <checkNetwork+0x40c>)
 80004bc:	482c      	ldr	r0, [pc, #176]	; (8000570 <checkNetwork+0x414>)
 80004be:	f001 ff26 	bl	800230e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 80004c2:	4829      	ldr	r0, [pc, #164]	; (8000568 <checkNetwork+0x40c>)
 80004c4:	f7ff fe42 	bl	800014c <strlen>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d0:	4925      	ldr	r1, [pc, #148]	; (8000568 <checkNetwork+0x40c>)
 80004d2:	4828      	ldr	r0, [pc, #160]	; (8000574 <checkNetwork+0x418>)
 80004d4:	f001 fe90 	bl	80021f8 <HAL_UART_Transmit>

	memset(AtCommand, 0, strlen(AtCommand));
 80004d8:	4822      	ldr	r0, [pc, #136]	; (8000564 <checkNetwork+0x408>)
 80004da:	f7ff fe37 	bl	800014c <strlen>
 80004de:	4603      	mov	r3, r0
 80004e0:	461a      	mov	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	481f      	ldr	r0, [pc, #124]	; (8000564 <checkNetwork+0x408>)
 80004e6:	f002 fd03 	bl	8002ef0 <memset>
	memset(Reply, 0, strlen((char*)Reply));
 80004ea:	481f      	ldr	r0, [pc, #124]	; (8000568 <checkNetwork+0x40c>)
 80004ec:	f7ff fe2e 	bl	800014c <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	481c      	ldr	r0, [pc, #112]	; (8000568 <checkNetwork+0x40c>)
 80004f8:	f002 fcfa 	bl	8002ef0 <memset>
	sprintf(AtCommand, "AT+CSQ\r\n");
 80004fc:	4920      	ldr	r1, [pc, #128]	; (8000580 <checkNetwork+0x424>)
 80004fe:	4819      	ldr	r0, [pc, #100]	; (8000564 <checkNetwork+0x408>)
 8000500:	f002 fcd6 	bl	8002eb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000504:	4817      	ldr	r0, [pc, #92]	; (8000564 <checkNetwork+0x408>)
 8000506:	f7ff fe21 	bl	800014c <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b29a      	uxth	r2, r3
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	4914      	ldr	r1, [pc, #80]	; (8000564 <checkNetwork+0x408>)
 8000514:	4816      	ldr	r0, [pc, #88]	; (8000570 <checkNetwork+0x414>)
 8000516:	f001 fe6f 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 800051a:	4812      	ldr	r0, [pc, #72]	; (8000564 <checkNetwork+0x408>)
 800051c:	f7ff fe16 	bl	800014c <strlen>
 8000520:	4603      	mov	r3, r0
 8000522:	b29a      	uxth	r2, r3
 8000524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000528:	490e      	ldr	r1, [pc, #56]	; (8000564 <checkNetwork+0x408>)
 800052a:	4812      	ldr	r0, [pc, #72]	; (8000574 <checkNetwork+0x418>)
 800052c:	f001 fe64 	bl	80021f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 8000530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000534:	2250      	movs	r2, #80	; 0x50
 8000536:	490c      	ldr	r1, [pc, #48]	; (8000568 <checkNetwork+0x40c>)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <checkNetwork+0x414>)
 800053a:	f001 fee8 	bl	800230e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 800053e:	480a      	ldr	r0, [pc, #40]	; (8000568 <checkNetwork+0x40c>)
 8000540:	f7ff fe04 	bl	800014c <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054c:	4906      	ldr	r1, [pc, #24]	; (8000568 <checkNetwork+0x40c>)
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <checkNetwork+0x418>)
 8000550:	f001 fe52 	bl	80021f8 <HAL_UART_Transmit>
	return 1;
 8000554:	2301      	movs	r3, #1
 8000556:	e000      	b.n	800055a <checkNetwork+0x3fe>
			return 0;
 8000558:	2300      	movs	r3, #0


}
 800055a:	4618      	mov	r0, r3
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40011000 	.word	0x40011000
 8000564:	20000218 	.word	0x20000218
 8000568:	20000268 	.word	0x20000268
 800056c:	08003884 	.word	0x08003884
 8000570:	20000078 	.word	0x20000078
 8000574:	200000c0 	.word	0x200000c0
 8000578:	08003890 	.word	0x08003890
 800057c:	0800389c 	.word	0x0800389c
 8000580:	080038a8 	.word	0x080038a8

08000584 <sendSMS>:

int sendSMS() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    memset(AtCommand, 0, sizeof(AtCommand));
 8000588:	2250      	movs	r2, #80	; 0x50
 800058a:	2100      	movs	r1, #0
 800058c:	4860      	ldr	r0, [pc, #384]	; (8000710 <sendSMS+0x18c>)
 800058e:	f002 fcaf 	bl	8002ef0 <memset>
    memset(Reply, 0, sizeof(Reply));
 8000592:	2250      	movs	r2, #80	; 0x50
 8000594:	2100      	movs	r1, #0
 8000596:	485f      	ldr	r0, [pc, #380]	; (8000714 <sendSMS+0x190>)
 8000598:	f002 fcaa 	bl	8002ef0 <memset>

    // Set SMS text mode
    sprintf(AtCommand, "AT+CMGF=1\r\n");
 800059c:	495e      	ldr	r1, [pc, #376]	; (8000718 <sendSMS+0x194>)
 800059e:	485c      	ldr	r0, [pc, #368]	; (8000710 <sendSMS+0x18c>)
 80005a0:	f002 fc86 	bl	8002eb0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80005a4:	485a      	ldr	r0, [pc, #360]	; (8000710 <sendSMS+0x18c>)
 80005a6:	f7ff fdd1 	bl	800014c <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	4957      	ldr	r1, [pc, #348]	; (8000710 <sendSMS+0x18c>)
 80005b4:	4859      	ldr	r0, [pc, #356]	; (800071c <sendSMS+0x198>)
 80005b6:	f001 fe1f 	bl	80021f8 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart2, Reply, sizeof(Reply), 1000);
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	2250      	movs	r2, #80	; 0x50
 80005c0:	4954      	ldr	r1, [pc, #336]	; (8000714 <sendSMS+0x190>)
 80005c2:	4856      	ldr	r0, [pc, #344]	; (800071c <sendSMS+0x198>)
 80005c4:	f001 fea3 	bl	800230e <HAL_UART_Receive>
    HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 80005c8:	4852      	ldr	r0, [pc, #328]	; (8000714 <sendSMS+0x190>)
 80005ca:	f7ff fdbf 	bl	800014c <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	494f      	ldr	r1, [pc, #316]	; (8000714 <sendSMS+0x190>)
 80005d8:	4851      	ldr	r0, [pc, #324]	; (8000720 <sendSMS+0x19c>)
 80005da:	f001 fe0d 	bl	80021f8 <HAL_UART_Transmit>

    if (strstr((char *)Reply, "OK") == NULL) {
 80005de:	4951      	ldr	r1, [pc, #324]	; (8000724 <sendSMS+0x1a0>)
 80005e0:	484c      	ldr	r0, [pc, #304]	; (8000714 <sendSMS+0x190>)
 80005e2:	f002 fc8d 	bl	8002f00 <strstr>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <sendSMS+0x6c>
        return 0; // Error setting text mode
 80005ec:	2300      	movs	r3, #0
 80005ee:	e08d      	b.n	800070c <sendSMS+0x188>
    }

    // Set recipient phone number
    memset(AtCommand, 0, sizeof(AtCommand));
 80005f0:	2250      	movs	r2, #80	; 0x50
 80005f2:	2100      	movs	r1, #0
 80005f4:	4846      	ldr	r0, [pc, #280]	; (8000710 <sendSMS+0x18c>)
 80005f6:	f002 fc7b 	bl	8002ef0 <memset>
    sprintf(AtCommand, "AT+CMGS=\"+254750558407\"\r\n");
 80005fa:	494b      	ldr	r1, [pc, #300]	; (8000728 <sendSMS+0x1a4>)
 80005fc:	4844      	ldr	r0, [pc, #272]	; (8000710 <sendSMS+0x18c>)
 80005fe:	f002 fc57 	bl	8002eb0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000602:	4843      	ldr	r0, [pc, #268]	; (8000710 <sendSMS+0x18c>)
 8000604:	f7ff fda2 	bl	800014c <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000610:	493f      	ldr	r1, [pc, #252]	; (8000710 <sendSMS+0x18c>)
 8000612:	4842      	ldr	r0, [pc, #264]	; (800071c <sendSMS+0x198>)
 8000614:	f001 fdf0 	bl	80021f8 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart2, Reply, sizeof(Reply), 1000);
 8000618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061c:	2250      	movs	r2, #80	; 0x50
 800061e:	493d      	ldr	r1, [pc, #244]	; (8000714 <sendSMS+0x190>)
 8000620:	483e      	ldr	r0, [pc, #248]	; (800071c <sendSMS+0x198>)
 8000622:	f001 fe74 	bl	800230e <HAL_UART_Receive>
    HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 8000626:	483b      	ldr	r0, [pc, #236]	; (8000714 <sendSMS+0x190>)
 8000628:	f7ff fd90 	bl	800014c <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	4937      	ldr	r1, [pc, #220]	; (8000714 <sendSMS+0x190>)
 8000636:	483a      	ldr	r0, [pc, #232]	; (8000720 <sendSMS+0x19c>)
 8000638:	f001 fdde 	bl	80021f8 <HAL_UART_Transmit>

    if (strstr((char *)Reply, "> ") == NULL) { // Check for prompt
 800063c:	493b      	ldr	r1, [pc, #236]	; (800072c <sendSMS+0x1a8>)
 800063e:	4835      	ldr	r0, [pc, #212]	; (8000714 <sendSMS+0x190>)
 8000640:	f002 fc5e 	bl	8002f00 <strstr>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <sendSMS+0xca>
        return 0; // Error setting phone number
 800064a:	2300      	movs	r3, #0
 800064c:	e05e      	b.n	800070c <sendSMS+0x188>
    }

    // Send SMS message
    memset(AtCommand, 0, sizeof(AtCommand));
 800064e:	2250      	movs	r2, #80	; 0x50
 8000650:	2100      	movs	r1, #0
 8000652:	482f      	ldr	r0, [pc, #188]	; (8000710 <sendSMS+0x18c>)
 8000654:	f002 fc4c 	bl	8002ef0 <memset>
    sprintf(AtCommand, "Hello\r\n");
 8000658:	4935      	ldr	r1, [pc, #212]	; (8000730 <sendSMS+0x1ac>)
 800065a:	482d      	ldr	r0, [pc, #180]	; (8000710 <sendSMS+0x18c>)
 800065c:	f002 fc28 	bl	8002eb0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000660:	482b      	ldr	r0, [pc, #172]	; (8000710 <sendSMS+0x18c>)
 8000662:	f7ff fd73 	bl	800014c <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	4928      	ldr	r1, [pc, #160]	; (8000710 <sendSMS+0x18c>)
 8000670:	482a      	ldr	r0, [pc, #168]	; (800071c <sendSMS+0x198>)
 8000672:	f001 fdc1 	bl	80021f8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000676:	4826      	ldr	r0, [pc, #152]	; (8000710 <sendSMS+0x18c>)
 8000678:	f7ff fd68 	bl	800014c <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	4922      	ldr	r1, [pc, #136]	; (8000710 <sendSMS+0x18c>)
 8000686:	4826      	ldr	r0, [pc, #152]	; (8000720 <sendSMS+0x19c>)
 8000688:	f001 fdb6 	bl	80021f8 <HAL_UART_Transmit>
    memset(AtCommand, 0, sizeof(AtCommand));
 800068c:	2250      	movs	r2, #80	; 0x50
 800068e:	2100      	movs	r1, #0
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <sendSMS+0x18c>)
 8000692:	f002 fc2d 	bl	8002ef0 <memset>

    AtCommand[0] = 26; // Ctrl+Z
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <sendSMS+0x18c>)
 8000698:	221a      	movs	r2, #26
 800069a:	701a      	strb	r2, [r3, #0]
    AtCommand[1] = '\0';
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <sendSMS+0x18c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	705a      	strb	r2, [r3, #1]
    HAL_UART_Transmit(&huart2, (uint8_t *)"\x1A", 1, 1000);
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	2201      	movs	r2, #1
 80006a8:	4922      	ldr	r1, [pc, #136]	; (8000734 <sendSMS+0x1b0>)
 80006aa:	481c      	ldr	r0, [pc, #112]	; (800071c <sendSMS+0x198>)
 80006ac:	f001 fda4 	bl	80021f8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t *)AtCommand, 1, 1000);
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	2201      	movs	r2, #1
 80006b6:	4916      	ldr	r1, [pc, #88]	; (8000710 <sendSMS+0x18c>)
 80006b8:	4819      	ldr	r0, [pc, #100]	; (8000720 <sendSMS+0x19c>)
 80006ba:	f001 fd9d 	bl	80021f8 <HAL_UART_Transmit>

    memset(Reply, 0, sizeof(Reply));
 80006be:	2250      	movs	r2, #80	; 0x50
 80006c0:	2100      	movs	r1, #0
 80006c2:	4814      	ldr	r0, [pc, #80]	; (8000714 <sendSMS+0x190>)
 80006c4:	f002 fc14 	bl	8002ef0 <memset>
    HAL_UART_Receive(&huart2, Reply, sizeof(Reply), 1000);
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	2250      	movs	r2, #80	; 0x50
 80006ce:	4911      	ldr	r1, [pc, #68]	; (8000714 <sendSMS+0x190>)
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <sendSMS+0x198>)
 80006d2:	f001 fe1c 	bl	800230e <HAL_UART_Receive>
    HAL_UART_Transmit(&huart3, (uint8_t *)Reply, strlen((char *)Reply), 1000);
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <sendSMS+0x190>)
 80006d8:	f7ff fd38 	bl	800014c <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e4:	490b      	ldr	r1, [pc, #44]	; (8000714 <sendSMS+0x190>)
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <sendSMS+0x19c>)
 80006e8:	f001 fd86 	bl	80021f8 <HAL_UART_Transmit>

    if (strstr((char *)Reply, "+CMGS:") != NULL) { // Check for +CMGS:
 80006ec:	4912      	ldr	r1, [pc, #72]	; (8000738 <sendSMS+0x1b4>)
 80006ee:	4809      	ldr	r0, [pc, #36]	; (8000714 <sendSMS+0x190>)
 80006f0:	f002 fc06 	bl	8002f00 <strstr>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <sendSMS+0x186>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // Indicate success
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000700:	480e      	ldr	r0, [pc, #56]	; (800073c <sendSMS+0x1b8>)
 8000702:	f001 f901 	bl	8001908 <HAL_GPIO_WritePin>
            return 1; // SMS sent successfully
 8000706:	2301      	movs	r3, #1
 8000708:	e000      	b.n	800070c <sendSMS+0x188>
        } else {
            return 0; // SMS sending failed
 800070a:	2300      	movs	r3, #0
        }

    return 1; // SMS sent successfully
}
 800070c:	4618      	mov	r0, r3
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000218 	.word	0x20000218
 8000714:	20000268 	.word	0x20000268
 8000718:	080038b4 	.word	0x080038b4
 800071c:	20000078 	.word	0x20000078
 8000720:	200000c0 	.word	0x200000c0
 8000724:	08003860 	.word	0x08003860
 8000728:	080038c0 	.word	0x080038c0
 800072c:	080038dc 	.word	0x080038dc
 8000730:	080038e0 	.word	0x080038e0
 8000734:	080038e8 	.word	0x080038e8
 8000738:	080038ec 	.word	0x080038ec
 800073c:	40011000 	.word	0x40011000

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fbb4 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f836 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f000 f904 	bl	8000958 <MX_GPIO_Init>
  MX_DMA_Init();
 8000750:	f000 f8cc 	bl	80008ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000754:	f000 f876 	bl	8000844 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000758:	f000 f89e 	bl	8000898 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <main+0x74>)
 8000764:	f001 f8d0 	bl	8001908 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8000768:	f241 3088 	movw	r0, #5000	; 0x1388
 800076c:	f000 fc02 	bl	8000f74 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <main+0x74>)
 8000778:	f001 f8c6 	bl	8001908 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 800077c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000780:	f000 fbf8 	bl	8000f74 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078a:	480a      	ldr	r0, [pc, #40]	; (80007b4 <main+0x74>)
 800078c:	f001 f8bc 	bl	8001908 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (!checkNetwork())
 8000790:	e005      	b.n	800079e <main+0x5e>
  {
    /* USER CODE END WHILE */
	  checkNetwork();
 8000792:	f7ff fce3 	bl	800015c <checkNetwork>
	  HAL_Delay(1000);
 8000796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079a:	f000 fbeb 	bl	8000f74 <HAL_Delay>
  while (!checkNetwork())
 800079e:	f7ff fcdd 	bl	800015c <checkNetwork>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0f4      	beq.n	8000792 <main+0x52>


    /* USER CODE BEGIN 3 */
  }
  sendSMS();
 80007a8:	f7ff feec 	bl	8000584 <sendSMS>
 80007ac:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40010800 	.word	0x40010800

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b090      	sub	sp, #64	; 0x40
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	2228      	movs	r2, #40	; 0x28
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 fb92 	bl	8002ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f899 	bl	8001938 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800080c:	f000 f912 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2102      	movs	r1, #2
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fb06 	bl	8001e3c <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000836:	f000 f8fd 	bl	8000a34 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3740      	adds	r7, #64	; 0x40
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <MX_USART2_UART_Init+0x50>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USART2_UART_Init+0x4c>)
 800087c:	f001 fc6c 	bl	8002158 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000886:	f000 f8d5 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000078 	.word	0x20000078
 8000894:	40004400 	.word	0x40004400

08000898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART3_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008d0:	f001 fc42 	bl	8002158 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f8ab 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000c0 	.word	0x200000c0
 80008e8:	40004800 	.word	0x40004800

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_DMA_Init+0x68>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_DMA_Init+0x68>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_DMA_Init+0x68>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200c      	movs	r0, #12
 8000910:	f000 fc2b 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000914:	200c      	movs	r0, #12
 8000916:	f000 fc44 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	200d      	movs	r0, #13
 8000920:	f000 fc23 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000924:	200d      	movs	r0, #13
 8000926:	f000 fc3c 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2010      	movs	r0, #16
 8000930:	f000 fc1b 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000934:	2010      	movs	r0, #16
 8000936:	f000 fc34 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2011      	movs	r0, #17
 8000940:	f000 fc13 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000944:	2011      	movs	r0, #17
 8000946:	f000 fc2c 	bl	80011a2 <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_GPIO_Init+0xd0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_GPIO_Init+0xd0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a27      	ldr	r2, [pc, #156]	; (8000a28 <MX_GPIO_Init+0xd0>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0320 	and.w	r3, r3, #32
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_GPIO_Init+0xd0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <MX_GPIO_Init+0xd4>)
 80009d4:	f000 ff98 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009de:	4814      	ldr	r0, [pc, #80]	; (8000a30 <MX_GPIO_Init+0xd8>)
 80009e0:	f000 ff92 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4619      	mov	r1, r3
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <MX_GPIO_Init+0xd4>)
 80009fe:	f000 fdff 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_GPIO_Init+0xd8>)
 8000a1c:	f000 fdf0 	bl	8001600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	40010800 	.word	0x40010800

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_MspInit+0x5c>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <HAL_MspInit+0x5c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6193      	str	r3, [r2, #24]
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_MspInit+0x5c>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x5c>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x5c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x5c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_MspInit+0x60>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_MspInit+0x60>)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010000 	.word	0x40010000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a8c      	ldr	r2, [pc, #560]	; (8000cf0 <HAL_UART_MspInit+0x24c>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	f040 8085 	bne.w	8000bd0 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	4b8b      	ldr	r3, [pc, #556]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a8a      	ldr	r2, [pc, #552]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b88      	ldr	r3, [pc, #544]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b85      	ldr	r3, [pc, #532]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a84      	ldr	r2, [pc, #528]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b82      	ldr	r3, [pc, #520]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0318 	add.w	r3, r7, #24
 8000b06:	4619      	mov	r1, r3
 8000b08:	487b      	ldr	r0, [pc, #492]	; (8000cf8 <HAL_UART_MspInit+0x254>)
 8000b0a:	f000 fd79 	bl	8001600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b0e:	2308      	movs	r3, #8
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4875      	ldr	r0, [pc, #468]	; (8000cf8 <HAL_UART_MspInit+0x254>)
 8000b22:	f000 fd6d 	bl	8001600 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000b26:	4b75      	ldr	r3, [pc, #468]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b28:	4a75      	ldr	r2, [pc, #468]	; (8000d00 <HAL_UART_MspInit+0x25c>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2c:	4b73      	ldr	r3, [pc, #460]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b32:	4b72      	ldr	r3, [pc, #456]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b38:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3e:	4b6f      	ldr	r3, [pc, #444]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b44:	4b6d      	ldr	r3, [pc, #436]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b4a:	4b6c      	ldr	r3, [pc, #432]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b50:	4b6a      	ldr	r3, [pc, #424]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b56:	4869      	ldr	r0, [pc, #420]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b58:	f000 fb3e 	bl	80011d8 <HAL_DMA_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000b62:	f7ff ff67 	bl	8000a34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a64      	ldr	r2, [pc, #400]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b6c:	4a63      	ldr	r2, [pc, #396]	; (8000cfc <HAL_UART_MspInit+0x258>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000b72:	4b64      	ldr	r3, [pc, #400]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000b74:	4a64      	ldr	r2, [pc, #400]	; (8000d08 <HAL_UART_MspInit+0x264>)
 8000b76:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b78:	4b62      	ldr	r3, [pc, #392]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7e:	4b61      	ldr	r3, [pc, #388]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b84:	4b5f      	ldr	r3, [pc, #380]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b8a:	4b5e      	ldr	r3, [pc, #376]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b90:	4b5c      	ldr	r3, [pc, #368]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b96:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9c:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ba2:	4858      	ldr	r0, [pc, #352]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000ba4:	f000 fb18 	bl	80011d8 <HAL_DMA_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000bae:	f7ff ff41 	bl	8000a34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a53      	ldr	r2, [pc, #332]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb8:	4a52      	ldr	r2, [pc, #328]	; (8000d04 <HAL_UART_MspInit+0x260>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2026      	movs	r0, #38	; 0x26
 8000bc4:	f000 fad1 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc8:	2026      	movs	r0, #38	; 0x26
 8000bca:	f000 faea 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bce:	e08b      	b.n	8000ce8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a4d      	ldr	r2, [pc, #308]	; (8000d0c <HAL_UART_MspInit+0x268>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	f040 8086 	bne.w	8000ce8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be6:	61d3      	str	r3, [r2, #28]
 8000be8:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a3e      	ldr	r2, [pc, #248]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <HAL_UART_MspInit+0x250>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	483b      	ldr	r0, [pc, #236]	; (8000d10 <HAL_UART_MspInit+0x26c>)
 8000c22:	f000 fced 	bl	8001600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4835      	ldr	r0, [pc, #212]	; (8000d10 <HAL_UART_MspInit+0x26c>)
 8000c3c:	f000 fce0 	bl	8001600 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c42:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <HAL_UART_MspInit+0x274>)
 8000c44:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c70:	4828      	ldr	r0, [pc, #160]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c72:	f000 fab1 	bl	80011d8 <HAL_DMA_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000c7c:	f7ff feda 	bl	8000a34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a24      	ldr	r2, [pc, #144]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c84:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <HAL_UART_MspInit+0x270>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000c8e:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000c90:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000c94:	2210      	movs	r2, #16
 8000c96:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000cbc:	4817      	ldr	r0, [pc, #92]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000cbe:	f000 fa8b 	bl	80011d8 <HAL_DMA_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000cc8:	f7ff feb4 	bl	8000a34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2027      	movs	r0, #39	; 0x27
 8000cde:	f000 fa44 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ce2:	2027      	movs	r0, #39	; 0x27
 8000ce4:	f000 fa5d 	bl	80011a2 <HAL_NVIC_EnableIRQ>
}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	20000108 	.word	0x20000108
 8000d00:	4002006c 	.word	0x4002006c
 8000d04:	2000014c 	.word	0x2000014c
 8000d08:	40020080 	.word	0x40020080
 8000d0c:	40004800 	.word	0x40004800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	20000190 	.word	0x20000190
 8000d18:	40020030 	.word	0x40020030
 8000d1c:	200001d4 	.word	0x200001d4
 8000d20:	4002001c 	.word	0x4002001c

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6a:	f000 f8e7 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <DMA1_Channel2_IRQHandler+0x10>)
 8000d7a:	f000 fb3b 	bl	80013f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001d4 	.word	0x200001d4

08000d88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <DMA1_Channel3_IRQHandler+0x10>)
 8000d8e:	f000 fb31 	bl	80013f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000190 	.word	0x20000190

08000d9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <DMA1_Channel6_IRQHandler+0x10>)
 8000da2:	f000 fb27 	bl	80013f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000108 	.word	0x20000108

08000db0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <DMA1_Channel7_IRQHandler+0x10>)
 8000db6:	f000 fb1d 	bl	80013f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000014c 	.word	0x2000014c

08000dc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <USART2_IRQHandler+0x10>)
 8000dca:	f001 fb37 	bl	800243c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000078 	.word	0x20000078

08000dd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <USART3_IRQHandler+0x10>)
 8000dde:	f001 fb2d 	bl	800243c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000c0 	.word	0x200000c0

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f002 f886 	bl	8002f2c <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20005000 	.word	0x20005000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	200002b8 	.word	0x200002b8
 8000e54:	20000408 	.word	0x20000408

08000e58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e64:	f7ff fff8 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e6a:	490c      	ldr	r1, [pc, #48]	; (8000e9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e80:	4c09      	ldr	r4, [pc, #36]	; (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f002 f853 	bl	8002f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e92:	f7ff fc55 	bl	8000740 <main>
  bx lr
 8000e96:	4770      	bx	lr
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ea0:	0800395c 	.word	0x0800395c
  ldr r2, =_sbss
 8000ea4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ea8:	20000408 	.word	0x20000408

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x28>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x28>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f947 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fdb8 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f95f 	bl	80011be <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f927 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200002bc 	.word	0x200002bc

08000f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	200002bc 	.word	0x200002bc

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff0 	bl	8000f60 <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffe0 	bl	8000f60 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff2d 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff42 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff35 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e043      	b.n	8001276 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_DMA_Init+0xa8>)
 80011f6:	4413      	add	r3, r2
 80011f8:	4a22      	ldr	r2, [pc, #136]	; (8001284 <HAL_DMA_Init+0xac>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	009a      	lsls	r2, r3, #2
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <HAL_DMA_Init+0xb0>)
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001222:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001226:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	bffdfff8 	.word	0xbffdfff8
 8001284:	cccccccd 	.word	0xcccccccd
 8001288:	40020000 	.word	0x40020000

0800128c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d008      	beq.n	80012b6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2204      	movs	r2, #4
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e020      	b.n	80012f8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 020e 	bic.w	r2, r2, #14
 80012c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	2101      	movs	r1, #1
 80012e0:	fa01 f202 	lsl.w	r2, r1, r2
 80012e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
	...

08001304 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d005      	beq.n	8001328 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2204      	movs	r2, #4
 8001320:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e051      	b.n	80013cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 020e 	bic.w	r2, r2, #14
 8001336:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0201 	bic.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_DMA_Abort_IT+0xd4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d029      	beq.n	80013a6 <HAL_DMA_Abort_IT+0xa2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a21      	ldr	r2, [pc, #132]	; (80013dc <HAL_DMA_Abort_IT+0xd8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d022      	beq.n	80013a2 <HAL_DMA_Abort_IT+0x9e>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <HAL_DMA_Abort_IT+0xdc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01a      	beq.n	800139c <HAL_DMA_Abort_IT+0x98>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <HAL_DMA_Abort_IT+0xe0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d012      	beq.n	8001396 <HAL_DMA_Abort_IT+0x92>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_DMA_Abort_IT+0xe4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00a      	beq.n	8001390 <HAL_DMA_Abort_IT+0x8c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <HAL_DMA_Abort_IT+0xe8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d102      	bne.n	800138a <HAL_DMA_Abort_IT+0x86>
 8001384:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001388:	e00e      	b.n	80013a8 <HAL_DMA_Abort_IT+0xa4>
 800138a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800138e:	e00b      	b.n	80013a8 <HAL_DMA_Abort_IT+0xa4>
 8001390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001394:	e008      	b.n	80013a8 <HAL_DMA_Abort_IT+0xa4>
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	e005      	b.n	80013a8 <HAL_DMA_Abort_IT+0xa4>
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	e002      	b.n	80013a8 <HAL_DMA_Abort_IT+0xa4>
 80013a2:	2310      	movs	r3, #16
 80013a4:	e000      	b.n	80013a8 <HAL_DMA_Abort_IT+0xa4>
 80013a6:	2301      	movs	r3, #1
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_DMA_Abort_IT+0xec>)
 80013aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
    } 
  }
  return status;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40020008 	.word	0x40020008
 80013dc:	4002001c 	.word	0x4002001c
 80013e0:	40020030 	.word	0x40020030
 80013e4:	40020044 	.word	0x40020044
 80013e8:	40020058 	.word	0x40020058
 80013ec:	4002006c 	.word	0x4002006c
 80013f0:	40020000 	.word	0x40020000

080013f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2204      	movs	r2, #4
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d04f      	beq.n	80014bc <HAL_DMA_IRQHandler+0xc8>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d04a      	beq.n	80014bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0204 	bic.w	r2, r2, #4
 8001442:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a66      	ldr	r2, [pc, #408]	; (80015e4 <HAL_DMA_IRQHandler+0x1f0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d029      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xae>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_DMA_IRQHandler+0x1f4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d022      	beq.n	800149e <HAL_DMA_IRQHandler+0xaa>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a63      	ldr	r2, [pc, #396]	; (80015ec <HAL_DMA_IRQHandler+0x1f8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01a      	beq.n	8001498 <HAL_DMA_IRQHandler+0xa4>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a62      	ldr	r2, [pc, #392]	; (80015f0 <HAL_DMA_IRQHandler+0x1fc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d012      	beq.n	8001492 <HAL_DMA_IRQHandler+0x9e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a60      	ldr	r2, [pc, #384]	; (80015f4 <HAL_DMA_IRQHandler+0x200>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00a      	beq.n	800148c <HAL_DMA_IRQHandler+0x98>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <HAL_DMA_IRQHandler+0x204>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d102      	bne.n	8001486 <HAL_DMA_IRQHandler+0x92>
 8001480:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001484:	e00e      	b.n	80014a4 <HAL_DMA_IRQHandler+0xb0>
 8001486:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800148a:	e00b      	b.n	80014a4 <HAL_DMA_IRQHandler+0xb0>
 800148c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001490:	e008      	b.n	80014a4 <HAL_DMA_IRQHandler+0xb0>
 8001492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001496:	e005      	b.n	80014a4 <HAL_DMA_IRQHandler+0xb0>
 8001498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149c:	e002      	b.n	80014a4 <HAL_DMA_IRQHandler+0xb0>
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	e000      	b.n	80014a4 <HAL_DMA_IRQHandler+0xb0>
 80014a2:	2304      	movs	r3, #4
 80014a4:	4a55      	ldr	r2, [pc, #340]	; (80015fc <HAL_DMA_IRQHandler+0x208>)
 80014a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8094 	beq.w	80015da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014ba:	e08e      	b.n	80015da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	2202      	movs	r2, #2
 80014c2:	409a      	lsls	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d056      	beq.n	800157a <HAL_DMA_IRQHandler+0x186>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d051      	beq.n	800157a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10b      	bne.n	80014fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 020a 	bic.w	r2, r2, #10
 80014f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <HAL_DMA_IRQHandler+0x1f0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d029      	beq.n	800155a <HAL_DMA_IRQHandler+0x166>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a37      	ldr	r2, [pc, #220]	; (80015e8 <HAL_DMA_IRQHandler+0x1f4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d022      	beq.n	8001556 <HAL_DMA_IRQHandler+0x162>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a35      	ldr	r2, [pc, #212]	; (80015ec <HAL_DMA_IRQHandler+0x1f8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01a      	beq.n	8001550 <HAL_DMA_IRQHandler+0x15c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a34      	ldr	r2, [pc, #208]	; (80015f0 <HAL_DMA_IRQHandler+0x1fc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d012      	beq.n	800154a <HAL_DMA_IRQHandler+0x156>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a32      	ldr	r2, [pc, #200]	; (80015f4 <HAL_DMA_IRQHandler+0x200>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00a      	beq.n	8001544 <HAL_DMA_IRQHandler+0x150>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a31      	ldr	r2, [pc, #196]	; (80015f8 <HAL_DMA_IRQHandler+0x204>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d102      	bne.n	800153e <HAL_DMA_IRQHandler+0x14a>
 8001538:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800153c:	e00e      	b.n	800155c <HAL_DMA_IRQHandler+0x168>
 800153e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001542:	e00b      	b.n	800155c <HAL_DMA_IRQHandler+0x168>
 8001544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001548:	e008      	b.n	800155c <HAL_DMA_IRQHandler+0x168>
 800154a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154e:	e005      	b.n	800155c <HAL_DMA_IRQHandler+0x168>
 8001550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001554:	e002      	b.n	800155c <HAL_DMA_IRQHandler+0x168>
 8001556:	2320      	movs	r3, #32
 8001558:	e000      	b.n	800155c <HAL_DMA_IRQHandler+0x168>
 800155a:	2302      	movs	r3, #2
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <HAL_DMA_IRQHandler+0x208>)
 800155e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	2b00      	cmp	r3, #0
 800156e:	d034      	beq.n	80015da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001578:	e02f      	b.n	80015da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	2208      	movs	r2, #8
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d028      	beq.n	80015dc <HAL_DMA_IRQHandler+0x1e8>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d023      	beq.n	80015dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 020e 	bic.w	r2, r2, #14
 80015a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	2101      	movs	r1, #1
 80015ae:	fa01 f202 	lsl.w	r2, r1, r2
 80015b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
    }
  }
  return;
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
}
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40020008 	.word	0x40020008
 80015e8:	4002001c 	.word	0x4002001c
 80015ec:	40020030 	.word	0x40020030
 80015f0:	40020044 	.word	0x40020044
 80015f4:	40020058 	.word	0x40020058
 80015f8:	4002006c 	.word	0x4002006c
 80015fc:	40020000 	.word	0x40020000

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e169      	b.n	80018e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001614:	2201      	movs	r2, #1
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	429a      	cmp	r2, r3
 800162e:	f040 8158 	bne.w	80018e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a9a      	ldr	r2, [pc, #616]	; (80018a0 <HAL_GPIO_Init+0x2a0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d05e      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 800163c:	4a98      	ldr	r2, [pc, #608]	; (80018a0 <HAL_GPIO_Init+0x2a0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d875      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 8001642:	4a98      	ldr	r2, [pc, #608]	; (80018a4 <HAL_GPIO_Init+0x2a4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d058      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 8001648:	4a96      	ldr	r2, [pc, #600]	; (80018a4 <HAL_GPIO_Init+0x2a4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d86f      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 800164e:	4a96      	ldr	r2, [pc, #600]	; (80018a8 <HAL_GPIO_Init+0x2a8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d052      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 8001654:	4a94      	ldr	r2, [pc, #592]	; (80018a8 <HAL_GPIO_Init+0x2a8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d869      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 800165a:	4a94      	ldr	r2, [pc, #592]	; (80018ac <HAL_GPIO_Init+0x2ac>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d04c      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 8001660:	4a92      	ldr	r2, [pc, #584]	; (80018ac <HAL_GPIO_Init+0x2ac>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d863      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 8001666:	4a92      	ldr	r2, [pc, #584]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d046      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 800166c:	4a90      	ldr	r2, [pc, #576]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d85d      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 8001672:	2b12      	cmp	r3, #18
 8001674:	d82a      	bhi.n	80016cc <HAL_GPIO_Init+0xcc>
 8001676:	2b12      	cmp	r3, #18
 8001678:	d859      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 800167a:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <HAL_GPIO_Init+0x80>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	080016fb 	.word	0x080016fb
 8001684:	080016d5 	.word	0x080016d5
 8001688:	080016e7 	.word	0x080016e7
 800168c:	08001729 	.word	0x08001729
 8001690:	0800172f 	.word	0x0800172f
 8001694:	0800172f 	.word	0x0800172f
 8001698:	0800172f 	.word	0x0800172f
 800169c:	0800172f 	.word	0x0800172f
 80016a0:	0800172f 	.word	0x0800172f
 80016a4:	0800172f 	.word	0x0800172f
 80016a8:	0800172f 	.word	0x0800172f
 80016ac:	0800172f 	.word	0x0800172f
 80016b0:	0800172f 	.word	0x0800172f
 80016b4:	0800172f 	.word	0x0800172f
 80016b8:	0800172f 	.word	0x0800172f
 80016bc:	0800172f 	.word	0x0800172f
 80016c0:	0800172f 	.word	0x0800172f
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016f1 	.word	0x080016f1
 80016cc:	4a79      	ldr	r2, [pc, #484]	; (80018b4 <HAL_GPIO_Init+0x2b4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016d2:	e02c      	b.n	800172e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	623b      	str	r3, [r7, #32]
          break;
 80016da:	e029      	b.n	8001730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	3304      	adds	r3, #4
 80016e2:	623b      	str	r3, [r7, #32]
          break;
 80016e4:	e024      	b.n	8001730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	3308      	adds	r3, #8
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e01f      	b.n	8001730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	330c      	adds	r3, #12
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e01a      	b.n	8001730 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001702:	2304      	movs	r3, #4
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e013      	b.n	8001730 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001710:	2308      	movs	r3, #8
 8001712:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	611a      	str	r2, [r3, #16]
          break;
 800171a:	e009      	b.n	8001730 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800171c:	2308      	movs	r3, #8
 800171e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	615a      	str	r2, [r3, #20]
          break;
 8001726:	e003      	b.n	8001730 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
          break;
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x130>
          break;
 800172e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2bff      	cmp	r3, #255	; 0xff
 8001734:	d801      	bhi.n	800173a <HAL_GPIO_Init+0x13a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	e001      	b.n	800173e <HAL_GPIO_Init+0x13e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3304      	adds	r3, #4
 800173e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d802      	bhi.n	800174c <HAL_GPIO_Init+0x14c>
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	e002      	b.n	8001752 <HAL_GPIO_Init+0x152>
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	3b08      	subs	r3, #8
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	210f      	movs	r1, #15
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	6a39      	ldr	r1, [r7, #32]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	431a      	orrs	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80b1 	beq.w	80018e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001780:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <HAL_GPIO_Init+0x2b8>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a4c      	ldr	r2, [pc, #304]	; (80018b8 <HAL_GPIO_Init+0x2b8>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <HAL_GPIO_Init+0x2b8>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001798:	4a48      	ldr	r2, [pc, #288]	; (80018bc <HAL_GPIO_Init+0x2bc>)
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a40      	ldr	r2, [pc, #256]	; (80018c0 <HAL_GPIO_Init+0x2c0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d013      	beq.n	80017ec <HAL_GPIO_Init+0x1ec>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a3f      	ldr	r2, [pc, #252]	; (80018c4 <HAL_GPIO_Init+0x2c4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00d      	beq.n	80017e8 <HAL_GPIO_Init+0x1e8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3e      	ldr	r2, [pc, #248]	; (80018c8 <HAL_GPIO_Init+0x2c8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d007      	beq.n	80017e4 <HAL_GPIO_Init+0x1e4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <HAL_GPIO_Init+0x2cc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_GPIO_Init+0x1e0>
 80017dc:	2303      	movs	r3, #3
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e0:	2304      	movs	r3, #4
 80017e2:	e004      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017ec:	2300      	movs	r3, #0
 80017ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017fe:	492f      	ldr	r1, [pc, #188]	; (80018bc <HAL_GPIO_Init+0x2bc>)
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	492c      	ldr	r1, [pc, #176]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	43db      	mvns	r3, r3
 800182e:	4928      	ldr	r1, [pc, #160]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001830:	4013      	ands	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	4922      	ldr	r1, [pc, #136]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	43db      	mvns	r3, r3
 8001856:	491e      	ldr	r1, [pc, #120]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001858:	4013      	ands	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4918      	ldr	r1, [pc, #96]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	43db      	mvns	r3, r3
 800187e:	4914      	ldr	r1, [pc, #80]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001880:	4013      	ands	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d021      	beq.n	80018d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	490e      	ldr	r1, [pc, #56]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e021      	b.n	80018e2 <HAL_GPIO_Init+0x2e2>
 800189e:	bf00      	nop
 80018a0:	10320000 	.word	0x10320000
 80018a4:	10310000 	.word	0x10310000
 80018a8:	10220000 	.word	0x10220000
 80018ac:	10210000 	.word	0x10210000
 80018b0:	10120000 	.word	0x10120000
 80018b4:	10110000 	.word	0x10110000
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	40010800 	.word	0x40010800
 80018c4:	40010c00 	.word	0x40010c00
 80018c8:	40011000 	.word	0x40011000
 80018cc:	40011400 	.word	0x40011400
 80018d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_GPIO_Init+0x304>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	43db      	mvns	r3, r3
 80018dc:	4909      	ldr	r1, [pc, #36]	; (8001904 <HAL_GPIO_Init+0x304>)
 80018de:	4013      	ands	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	3301      	adds	r3, #1
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f47f ae8e 	bne.w	8001614 <HAL_GPIO_Init+0x14>
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	372c      	adds	r7, #44	; 0x2c
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001924:	e003      	b.n	800192e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	611a      	str	r2, [r3, #16]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e272      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8087 	beq.w	8001a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001958:	4b92      	ldr	r3, [pc, #584]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b04      	cmp	r3, #4
 8001962:	d00c      	beq.n	800197e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001964:	4b8f      	ldr	r3, [pc, #572]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d112      	bne.n	8001996 <HAL_RCC_OscConfig+0x5e>
 8001970:	4b8c      	ldr	r3, [pc, #560]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	d10b      	bne.n	8001996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d06c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x12c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d168      	bne.n	8001a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e24c      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x76>
 80019a0:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a7f      	ldr	r2, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e02e      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x98>
 80019b6:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7a      	ldr	r2, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b78      	ldr	r3, [pc, #480]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a77      	ldr	r2, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e01d      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0xbc>
 80019da:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a71      	ldr	r2, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019f4:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6a      	ldr	r2, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a67      	ldr	r2, [pc, #412]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff faa4 	bl	8000f60 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff faa0 	bl	8000f60 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e200      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xe4>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fa90 	bl	8000f60 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fa8c 	bl	8000f60 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1ec      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x10c>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d063      	beq.n	8001b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d11c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x18c>
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d116      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x176>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e1c0      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4939      	ldr	r1, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	e03a      	b.n	8001b3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_RCC_OscConfig+0x270>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa45 	bl	8000f60 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff fa41 	bl	8000f60 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1a1      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4927      	ldr	r1, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_RCC_OscConfig+0x270>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa24 	bl	8000f60 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa20 	bl	8000f60 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e180      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03a      	beq.n	8001bbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d019      	beq.n	8001b82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fa04 	bl	8000f60 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fa00 	bl	8000f60 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e160      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 face 	bl	800211c <RCC_Delay>
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff f9ea 	bl	8000f60 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8e:	e00f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff f9e6 	bl	8000f60 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d908      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e146      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	42420000 	.word	0x42420000
 8001bac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4b92      	ldr	r3, [pc, #584]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e9      	bne.n	8001b90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a6 	beq.w	8001d16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b8b      	ldr	r3, [pc, #556]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a87      	ldr	r2, [pc, #540]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b85      	ldr	r3, [pc, #532]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <HAL_RCC_OscConfig+0x4c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x4c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a7e      	ldr	r2, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x4c8>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f9a7 	bl	8000f60 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff f9a3 	bl	8000f60 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e103      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b75      	ldr	r3, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x4c8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x312>
 8001c3c:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a6e      	ldr	r2, [pc, #440]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	e02d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x334>
 8001c52:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a69      	ldr	r2, [pc, #420]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a66      	ldr	r2, [pc, #408]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	e01c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x356>
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a60      	ldr	r2, [pc, #384]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6213      	str	r3, [r2, #32]
 8001c80:	4b5e      	ldr	r3, [pc, #376]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a5d      	ldr	r2, [pc, #372]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	e00b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a5a      	ldr	r2, [pc, #360]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	4b58      	ldr	r3, [pc, #352]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a57      	ldr	r2, [pc, #348]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d015      	beq.n	8001cda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff f957 	bl	8000f60 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff f953 	bl	8000f60 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0b1      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ee      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x37e>
 8001cd8:	e014      	b.n	8001d04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7ff f941 	bl	8000f60 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff f93d 	bl	8000f60 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e09b      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ee      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8087 	beq.w	8001e2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d061      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d146      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f911 	bl	8000f60 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff f90d 	bl	8000f60 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e06d      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d54:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d108      	bne.n	8001d7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4921      	ldr	r1, [pc, #132]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a19      	ldr	r1, [r3, #32]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	491b      	ldr	r1, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f8e1 	bl	8000f60 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff f8dd 	bl	8000f60 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e03d      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x46a>
 8001dc0:	e035      	b.n	8001e2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f8ca 	bl	8000f60 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff f8c6 	bl	8000f60 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e026      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x498>
 8001dee:	e01e      	b.n	8001e2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e019      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
 8001e04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_OscConfig+0x500>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0d0      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d910      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0207 	bic.w	r2, r3, #7
 8001e66:	4965      	ldr	r1, [pc, #404]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0b8      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e98:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a58      	ldr	r2, [pc, #352]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ea2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b50      	ldr	r3, [pc, #320]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	494d      	ldr	r1, [pc, #308]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d040      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d115      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e07f      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e073      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e06b      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f023 0203 	bic.w	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4936      	ldr	r1, [pc, #216]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f2c:	f7ff f818 	bl	8000f60 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7ff f814 	bl	8000f60 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e053      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 020c 	and.w	r2, r3, #12
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d1eb      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d210      	bcs.n	8001f8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0207 	bic.w	r2, r3, #7
 8001f72:	4922      	ldr	r1, [pc, #136]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e032      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4916      	ldr	r1, [pc, #88]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	490e      	ldr	r1, [pc, #56]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fca:	f000 f821 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	490a      	ldr	r1, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	5ccb      	ldrb	r3, [r1, r3]
 8001fde:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <HAL_RCC_ClockConfig+0x1cc>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_ClockConfig+0x1d0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe ff76 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40021000 	.word	0x40021000
 8002004:	080038f4 	.word	0x080038f4
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b04      	cmp	r3, #4
 8002038:	d002      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x30>
 800203a:	2b08      	cmp	r3, #8
 800203c:	d003      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x36>
 800203e:	e027      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002042:	613b      	str	r3, [r7, #16]
      break;
 8002044:	e027      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	0c9b      	lsrs	r3, r3, #18
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	0c5b      	lsrs	r3, r3, #17
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002072:	fb03 f202 	mul.w	r2, r3, r2
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e004      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	613b      	str	r3, [r7, #16]
      break;
 800208e:	e002      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002092:	613b      	str	r3, [r7, #16]
      break;
 8002094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002096:	693b      	ldr	r3, [r7, #16]
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	007a1200 	.word	0x007a1200
 80020ac:	0800390c 	.word	0x0800390c
 80020b0:	0800391c 	.word	0x0800391c
 80020b4:	003d0900 	.word	0x003d0900

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b02      	ldr	r3, [pc, #8]	; (80020c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	20000000 	.word	0x20000000

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d0:	f7ff fff2 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4903      	ldr	r1, [pc, #12]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08003904 	.word	0x08003904

080020f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0adb      	lsrs	r3, r3, #11
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4903      	ldr	r1, [pc, #12]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800210a:	5ccb      	ldrb	r3, [r1, r3]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	08003904 	.word	0x08003904

0800211c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <RCC_Delay+0x34>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <RCC_Delay+0x38>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0a5b      	lsrs	r3, r3, #9
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002138:	bf00      	nop
  }
  while (Delay --);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	60fa      	str	r2, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f9      	bne.n	8002138 <RCC_Delay+0x1c>
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000000 	.word	0x20000000
 8002154:	10624dd3 	.word	0x10624dd3

08002158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e042      	b.n	80021f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe fc90 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fdf9 	bl	8002d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b20      	cmp	r3, #32
 8002216:	d175      	bne.n	8002304 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_UART_Transmit+0x2c>
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e06e      	b.n	8002306 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2221      	movs	r2, #33	; 0x21
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002236:	f7fe fe93 	bl	8000f60 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002250:	d108      	bne.n	8002264 <HAL_UART_Transmit+0x6c>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e003      	b.n	800226c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800226c:	e02e      	b.n	80022cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fb97 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e03a      	b.n	8002306 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	3302      	adds	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	e007      	b.n	80022be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1cb      	bne.n	800226e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2200      	movs	r2, #0
 80022de:	2140      	movs	r1, #64	; 0x40
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb63 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e006      	b.n	8002306 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b08a      	sub	sp, #40	; 0x28
 8002312:	af02      	add	r7, sp, #8
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b20      	cmp	r3, #32
 800232c:	f040 8081 	bne.w	8002432 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_UART_Receive+0x2e>
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e079      	b.n	8002434 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2222      	movs	r2, #34	; 0x22
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002354:	f7fe fe04 	bl	8000f60 <HAL_GetTick>
 8002358:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	88fa      	ldrh	r2, [r7, #6]
 800235e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	88fa      	ldrh	r2, [r7, #6]
 8002364:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236e:	d108      	bne.n	8002382 <HAL_UART_Receive+0x74>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e003      	b.n	800238a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800238a:	e047      	b.n	800241c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2200      	movs	r2, #0
 8002394:	2120      	movs	r1, #32
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fb08 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e042      	b.n	8002434 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10c      	bne.n	80023ce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	3302      	adds	r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e01f      	b.n	800240e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d6:	d007      	beq.n	80023e8 <HAL_UART_Receive+0xda>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <HAL_UART_Receive+0xe8>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	e008      	b.n	8002408 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002402:	b2da      	uxtb	r2, r3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1b2      	bne.n	800238c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002432:	2302      	movs	r3, #2
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b0ba      	sub	sp, #232	; 0xe8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800247a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_UART_IRQHandler+0x66>
 800248e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fbbc 	bl	8002c18 <UART_Receive_IT>
      return;
 80024a0:	e25b      	b.n	800295a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80de 	beq.w	8002668 <HAL_UART_IRQHandler+0x22c>
 80024ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80d1 	beq.w	8002668 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_UART_IRQHandler+0xae>
 80024d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_UART_IRQHandler+0xd2>
 80024f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_UART_IRQHandler+0xf6>
 800251a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f043 0204 	orr.w	r2, r3, #4
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d011      	beq.n	8002562 <HAL_UART_IRQHandler+0x126>
 800253e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800254a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f043 0208 	orr.w	r2, r3, #8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 81f2 	beq.w	8002950 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800256c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_UART_IRQHandler+0x14e>
 8002578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fb47 	bl	8002c18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf14      	ite	ne
 8002598:	2301      	movne	r3, #1
 800259a:	2300      	moveq	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_UART_IRQHandler+0x17a>
 80025ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d04f      	beq.n	8002656 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa51 	bl	8002a5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d041      	beq.n	800264e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3314      	adds	r3, #20
 80025d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d8:	e853 3f00 	ldrex	r3, [r3]
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3314      	adds	r3, #20
 80025f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800260e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1d9      	bne.n	80025ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d013      	beq.n	8002646 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_UART_IRQHandler+0x3e0>)
 8002624:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fe6a 	bl	8001304 <HAL_DMA_Abort_IT>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002640:	4610      	mov	r0, r2
 8002642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	e00e      	b.n	8002664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f99c 	bl	8002984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	e00a      	b.n	8002664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f998 	bl	8002984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002654:	e006      	b.n	8002664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f994 	bl	8002984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002662:	e175      	b.n	8002950 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002664:	bf00      	nop
    return;
 8002666:	e173      	b.n	8002950 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	2b01      	cmp	r3, #1
 800266e:	f040 814f 	bne.w	8002910 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8148 	beq.w	8002910 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8141 	beq.w	8002910 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80b6 	beq.w	8002820 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8145 	beq.w	8002954 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026d2:	429a      	cmp	r2, r3
 80026d4:	f080 813e 	bcs.w	8002954 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	f000 8088 	beq.w	80027fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	330c      	adds	r3, #12
 80026f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026fa:	e853 3f00 	ldrex	r3, [r3]
 80026fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800270a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002718:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800271c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002724:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002728:	e841 2300 	strex	r3, r2, [r1]
 800272c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1d9      	bne.n	80026ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3314      	adds	r3, #20
 800273e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002742:	e853 3f00 	ldrex	r3, [r3]
 8002746:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3314      	adds	r3, #20
 8002758:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002760:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002762:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002764:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800276e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e1      	bne.n	8002738 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3314      	adds	r3, #20
 800277a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800277e:	e853 3f00 	ldrex	r3, [r3]
 8002782:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3314      	adds	r3, #20
 8002794:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002798:	66fa      	str	r2, [r7, #108]	; 0x6c
 800279a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800279e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027a0:	e841 2300 	strex	r3, r2, [r1]
 80027a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e3      	bne.n	8002774 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	330c      	adds	r3, #12
 80027c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027cc:	f023 0310 	bic.w	r3, r3, #16
 80027d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027de:	65ba      	str	r2, [r7, #88]	; 0x58
 80027e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e6:	e841 2300 	strex	r3, r2, [r1]
 80027ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e3      	bne.n	80027ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fd48 	bl	800128c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800280a:	b29b      	uxth	r3, r3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	b29b      	uxth	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8bf 	bl	8002996 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002818:	e09c      	b.n	8002954 <HAL_UART_IRQHandler+0x518>
 800281a:	bf00      	nop
 800281c:	08002b23 	.word	0x08002b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002828:	b29b      	uxth	r3, r3
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 808e 	beq.w	8002958 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800283c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8089 	beq.w	8002958 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800285c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800286a:	647a      	str	r2, [r7, #68]	; 0x44
 800286c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e3      	bne.n	8002846 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3314      	adds	r3, #20
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	e853 3f00 	ldrex	r3, [r3]
 800288c:	623b      	str	r3, [r7, #32]
   return(result);
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3314      	adds	r3, #20
 800289e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028a2:	633a      	str	r2, [r7, #48]	; 0x30
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e3      	bne.n	800287e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	330c      	adds	r3, #12
 80028ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	e853 3f00 	ldrex	r3, [r3]
 80028d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0310 	bic.w	r3, r3, #16
 80028da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028e8:	61fa      	str	r2, [r7, #28]
 80028ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	69b9      	ldr	r1, [r7, #24]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	e841 2300 	strex	r3, r2, [r1]
 80028f4:	617b      	str	r3, [r7, #20]
   return(result);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e3      	bne.n	80028c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f844 	bl	8002996 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800290e:	e023      	b.n	8002958 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_UART_IRQHandler+0x4f4>
 800291c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f90e 	bl	8002b4a <UART_Transmit_IT>
    return;
 800292e:	e014      	b.n	800295a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00e      	beq.n	800295a <HAL_UART_IRQHandler+0x51e>
 800293c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f94d 	bl	8002be8 <UART_EndTransmit_IT>
    return;
 800294e:	e004      	b.n	800295a <HAL_UART_IRQHandler+0x51e>
    return;
 8002950:	bf00      	nop
 8002952:	e002      	b.n	800295a <HAL_UART_IRQHandler+0x51e>
      return;
 8002954:	bf00      	nop
 8002956:	e000      	b.n	800295a <HAL_UART_IRQHandler+0x51e>
      return;
 8002958:	bf00      	nop
  }
}
 800295a:	37e8      	adds	r7, #232	; 0xe8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029bc:	e03b      	b.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d037      	beq.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe facb 	bl	8000f60 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <UART_WaitOnFlagUntilTimeout+0x30>
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e03a      	b.n	8002a56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d023      	beq.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b80      	cmp	r3, #128	; 0x80
 80029f2:	d020      	beq.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d01d      	beq.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d116      	bne.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f81d 	bl	8002a5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2208      	movs	r2, #8
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	bf0c      	ite	eq
 8002a46:	2301      	moveq	r3, #1
 8002a48:	2300      	movne	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d0b4      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b095      	sub	sp, #84	; 0x54
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a86:	643a      	str	r2, [r7, #64]	; 0x40
 8002a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e5      	bne.n	8002a66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3314      	adds	r3, #20
 8002aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e5      	bne.n	8002a9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d119      	bne.n	8002b0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	330c      	adds	r3, #12
 8002adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	e853 3f00 	ldrex	r3, [r3]
 8002ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f023 0310 	bic.w	r3, r3, #16
 8002aec:	647b      	str	r3, [r7, #68]	; 0x44
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002af6:	61ba      	str	r2, [r7, #24]
 8002af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6979      	ldr	r1, [r7, #20]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	613b      	str	r3, [r7, #16]
   return(result);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e5      	bne.n	8002ad6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b18:	bf00      	nop
 8002b1a:	3754      	adds	r7, #84	; 0x54
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ff21 	bl	8002984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b21      	cmp	r3, #33	; 0x21
 8002b5c:	d13e      	bne.n	8002bdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	d114      	bne.n	8002b92 <UART_Transmit_IT+0x48>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d110      	bne.n	8002b92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	621a      	str	r2, [r3, #32]
 8002b90:	e008      	b.n	8002ba4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6211      	str	r1, [r2, #32]
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10f      	bne.n	8002bd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fea9 	bl	8002960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b22      	cmp	r3, #34	; 0x22
 8002c2a:	f040 80ae 	bne.w	8002d8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c36:	d117      	bne.n	8002c68 <UART_Receive_IT+0x50>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d113      	bne.n	8002c68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	1c9a      	adds	r2, r3, #2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28
 8002c66:	e026      	b.n	8002cb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7a:	d007      	beq.n	8002c8c <UART_Receive_IT+0x74>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <UART_Receive_IT+0x82>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d106      	bne.n	8002c9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e008      	b.n	8002cac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d15d      	bne.n	8002d86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0220 	bic.w	r2, r2, #32
 8002cd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d135      	bne.n	8002d7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	613b      	str	r3, [r7, #16]
   return(result);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f023 0310 	bic.w	r3, r3, #16
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d36:	623a      	str	r2, [r7, #32]
 8002d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	69f9      	ldr	r1, [r7, #28]
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	e841 2300 	strex	r3, r2, [r1]
 8002d42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1e5      	bne.n	8002d16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d10a      	bne.n	8002d6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff fe0e 	bl	8002996 <HAL_UARTEx_RxEventCallback>
 8002d7a:	e002      	b.n	8002d82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fdf8 	bl	8002972 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e002      	b.n	8002d8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
  }
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3730      	adds	r7, #48	; 0x30
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002dce:	f023 030c 	bic.w	r3, r3, #12
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <UART_SetConfig+0x114>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d103      	bne.n	8002e04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dfc:	f7ff f97a 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	e002      	b.n	8002e0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e04:	f7ff f962 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8002e08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009a      	lsls	r2, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <UART_SetConfig+0x118>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	0119      	lsls	r1, r3, #4
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	009a      	lsls	r2, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <UART_SetConfig+0x118>)
 8002e42:	fba3 0302 	umull	r0, r3, r3, r2
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2064      	movs	r0, #100	; 0x64
 8002e4a:	fb00 f303 	mul.w	r3, r0, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	3332      	adds	r3, #50	; 0x32
 8002e54:	4a15      	ldr	r2, [pc, #84]	; (8002eac <UART_SetConfig+0x118>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e60:	4419      	add	r1, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009a      	lsls	r2, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <UART_SetConfig+0x118>)
 8002e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2064      	movs	r0, #100	; 0x64
 8002e82:	fb00 f303 	mul.w	r3, r0, r3
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	3332      	adds	r3, #50	; 0x32
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <UART_SetConfig+0x118>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	f003 020f 	and.w	r2, r3, #15
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	440a      	add	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	51eb851f 	.word	0x51eb851f

08002eb0 <siprintf>:
 8002eb0:	b40e      	push	{r1, r2, r3}
 8002eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002eb6:	b500      	push	{lr}
 8002eb8:	b09c      	sub	sp, #112	; 0x70
 8002eba:	ab1d      	add	r3, sp, #116	; 0x74
 8002ebc:	9002      	str	r0, [sp, #8]
 8002ebe:	9006      	str	r0, [sp, #24]
 8002ec0:	9107      	str	r1, [sp, #28]
 8002ec2:	9104      	str	r1, [sp, #16]
 8002ec4:	4808      	ldr	r0, [pc, #32]	; (8002ee8 <siprintf+0x38>)
 8002ec6:	4909      	ldr	r1, [pc, #36]	; (8002eec <siprintf+0x3c>)
 8002ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ecc:	9105      	str	r1, [sp, #20]
 8002ece:	6800      	ldr	r0, [r0, #0]
 8002ed0:	a902      	add	r1, sp, #8
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	f000 f9a4 	bl	8003220 <_svfiprintf_r>
 8002ed8:	2200      	movs	r2, #0
 8002eda:	9b02      	ldr	r3, [sp, #8]
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	b01c      	add	sp, #112	; 0x70
 8002ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ee4:	b003      	add	sp, #12
 8002ee6:	4770      	bx	lr
 8002ee8:	20000058 	.word	0x20000058
 8002eec:	ffff0208 	.word	0xffff0208

08002ef0 <memset>:
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4402      	add	r2, r0
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d100      	bne.n	8002efa <memset+0xa>
 8002ef8:	4770      	bx	lr
 8002efa:	f803 1b01 	strb.w	r1, [r3], #1
 8002efe:	e7f9      	b.n	8002ef4 <memset+0x4>

08002f00 <strstr>:
 8002f00:	780a      	ldrb	r2, [r1, #0]
 8002f02:	b570      	push	{r4, r5, r6, lr}
 8002f04:	b96a      	cbnz	r2, 8002f22 <strstr+0x22>
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d109      	bne.n	8002f20 <strstr+0x20>
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	4605      	mov	r5, r0
 8002f10:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f6      	beq.n	8002f06 <strstr+0x6>
 8002f18:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002f1c:	429e      	cmp	r6, r3
 8002f1e:	d0f7      	beq.n	8002f10 <strstr+0x10>
 8002f20:	3001      	adds	r0, #1
 8002f22:	7803      	ldrb	r3, [r0, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ef      	bne.n	8002f08 <strstr+0x8>
 8002f28:	4618      	mov	r0, r3
 8002f2a:	e7ec      	b.n	8002f06 <strstr+0x6>

08002f2c <__errno>:
 8002f2c:	4b01      	ldr	r3, [pc, #4]	; (8002f34 <__errno+0x8>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000058 	.word	0x20000058

08002f38 <__libc_init_array>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	4d0c      	ldr	r5, [pc, #48]	; (8002f70 <__libc_init_array+0x38>)
 8002f3e:	4c0d      	ldr	r4, [pc, #52]	; (8002f74 <__libc_init_array+0x3c>)
 8002f40:	1b64      	subs	r4, r4, r5
 8002f42:	10a4      	asrs	r4, r4, #2
 8002f44:	42a6      	cmp	r6, r4
 8002f46:	d109      	bne.n	8002f5c <__libc_init_array+0x24>
 8002f48:	f000 fc7a 	bl	8003840 <_init>
 8002f4c:	2600      	movs	r6, #0
 8002f4e:	4d0a      	ldr	r5, [pc, #40]	; (8002f78 <__libc_init_array+0x40>)
 8002f50:	4c0a      	ldr	r4, [pc, #40]	; (8002f7c <__libc_init_array+0x44>)
 8002f52:	1b64      	subs	r4, r4, r5
 8002f54:	10a4      	asrs	r4, r4, #2
 8002f56:	42a6      	cmp	r6, r4
 8002f58:	d105      	bne.n	8002f66 <__libc_init_array+0x2e>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f60:	4798      	blx	r3
 8002f62:	3601      	adds	r6, #1
 8002f64:	e7ee      	b.n	8002f44 <__libc_init_array+0xc>
 8002f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6a:	4798      	blx	r3
 8002f6c:	3601      	adds	r6, #1
 8002f6e:	e7f2      	b.n	8002f56 <__libc_init_array+0x1e>
 8002f70:	08003954 	.word	0x08003954
 8002f74:	08003954 	.word	0x08003954
 8002f78:	08003954 	.word	0x08003954
 8002f7c:	08003958 	.word	0x08003958

08002f80 <__retarget_lock_acquire_recursive>:
 8002f80:	4770      	bx	lr

08002f82 <__retarget_lock_release_recursive>:
 8002f82:	4770      	bx	lr

08002f84 <_free_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4605      	mov	r5, r0
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	d040      	beq.n	800300e <_free_r+0x8a>
 8002f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f90:	1f0c      	subs	r4, r1, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bfb8      	it	lt
 8002f96:	18e4      	addlt	r4, r4, r3
 8002f98:	f000 f8dc 	bl	8003154 <__malloc_lock>
 8002f9c:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <_free_r+0x8c>)
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	b933      	cbnz	r3, 8002fb0 <_free_r+0x2c>
 8002fa2:	6063      	str	r3, [r4, #4]
 8002fa4:	6014      	str	r4, [r2, #0]
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fac:	f000 b8d8 	b.w	8003160 <__malloc_unlock>
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	d908      	bls.n	8002fc6 <_free_r+0x42>
 8002fb4:	6820      	ldr	r0, [r4, #0]
 8002fb6:	1821      	adds	r1, r4, r0
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	bf01      	itttt	eq
 8002fbc:	6819      	ldreq	r1, [r3, #0]
 8002fbe:	685b      	ldreq	r3, [r3, #4]
 8002fc0:	1809      	addeq	r1, r1, r0
 8002fc2:	6021      	streq	r1, [r4, #0]
 8002fc4:	e7ed      	b.n	8002fa2 <_free_r+0x1e>
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b10b      	cbz	r3, 8002fd0 <_free_r+0x4c>
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	d9fa      	bls.n	8002fc6 <_free_r+0x42>
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	1850      	adds	r0, r2, r1
 8002fd4:	42a0      	cmp	r0, r4
 8002fd6:	d10b      	bne.n	8002ff0 <_free_r+0x6c>
 8002fd8:	6820      	ldr	r0, [r4, #0]
 8002fda:	4401      	add	r1, r0
 8002fdc:	1850      	adds	r0, r2, r1
 8002fde:	4283      	cmp	r3, r0
 8002fe0:	6011      	str	r1, [r2, #0]
 8002fe2:	d1e0      	bne.n	8002fa6 <_free_r+0x22>
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4408      	add	r0, r1
 8002fea:	6010      	str	r0, [r2, #0]
 8002fec:	6053      	str	r3, [r2, #4]
 8002fee:	e7da      	b.n	8002fa6 <_free_r+0x22>
 8002ff0:	d902      	bls.n	8002ff8 <_free_r+0x74>
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	602b      	str	r3, [r5, #0]
 8002ff6:	e7d6      	b.n	8002fa6 <_free_r+0x22>
 8002ff8:	6820      	ldr	r0, [r4, #0]
 8002ffa:	1821      	adds	r1, r4, r0
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	bf01      	itttt	eq
 8003000:	6819      	ldreq	r1, [r3, #0]
 8003002:	685b      	ldreq	r3, [r3, #4]
 8003004:	1809      	addeq	r1, r1, r0
 8003006:	6021      	streq	r1, [r4, #0]
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	6054      	str	r4, [r2, #4]
 800300c:	e7cb      	b.n	8002fa6 <_free_r+0x22>
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	20000400 	.word	0x20000400

08003014 <sbrk_aligned>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	4e0e      	ldr	r6, [pc, #56]	; (8003050 <sbrk_aligned+0x3c>)
 8003018:	460c      	mov	r4, r1
 800301a:	6831      	ldr	r1, [r6, #0]
 800301c:	4605      	mov	r5, r0
 800301e:	b911      	cbnz	r1, 8003026 <sbrk_aligned+0x12>
 8003020:	f000 fbaa 	bl	8003778 <_sbrk_r>
 8003024:	6030      	str	r0, [r6, #0]
 8003026:	4621      	mov	r1, r4
 8003028:	4628      	mov	r0, r5
 800302a:	f000 fba5 	bl	8003778 <_sbrk_r>
 800302e:	1c43      	adds	r3, r0, #1
 8003030:	d00a      	beq.n	8003048 <sbrk_aligned+0x34>
 8003032:	1cc4      	adds	r4, r0, #3
 8003034:	f024 0403 	bic.w	r4, r4, #3
 8003038:	42a0      	cmp	r0, r4
 800303a:	d007      	beq.n	800304c <sbrk_aligned+0x38>
 800303c:	1a21      	subs	r1, r4, r0
 800303e:	4628      	mov	r0, r5
 8003040:	f000 fb9a 	bl	8003778 <_sbrk_r>
 8003044:	3001      	adds	r0, #1
 8003046:	d101      	bne.n	800304c <sbrk_aligned+0x38>
 8003048:	f04f 34ff 	mov.w	r4, #4294967295
 800304c:	4620      	mov	r0, r4
 800304e:	bd70      	pop	{r4, r5, r6, pc}
 8003050:	20000404 	.word	0x20000404

08003054 <_malloc_r>:
 8003054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003058:	1ccd      	adds	r5, r1, #3
 800305a:	f025 0503 	bic.w	r5, r5, #3
 800305e:	3508      	adds	r5, #8
 8003060:	2d0c      	cmp	r5, #12
 8003062:	bf38      	it	cc
 8003064:	250c      	movcc	r5, #12
 8003066:	2d00      	cmp	r5, #0
 8003068:	4607      	mov	r7, r0
 800306a:	db01      	blt.n	8003070 <_malloc_r+0x1c>
 800306c:	42a9      	cmp	r1, r5
 800306e:	d905      	bls.n	800307c <_malloc_r+0x28>
 8003070:	230c      	movs	r3, #12
 8003072:	2600      	movs	r6, #0
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4630      	mov	r0, r6
 8003078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800307c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003150 <_malloc_r+0xfc>
 8003080:	f000 f868 	bl	8003154 <__malloc_lock>
 8003084:	f8d8 3000 	ldr.w	r3, [r8]
 8003088:	461c      	mov	r4, r3
 800308a:	bb5c      	cbnz	r4, 80030e4 <_malloc_r+0x90>
 800308c:	4629      	mov	r1, r5
 800308e:	4638      	mov	r0, r7
 8003090:	f7ff ffc0 	bl	8003014 <sbrk_aligned>
 8003094:	1c43      	adds	r3, r0, #1
 8003096:	4604      	mov	r4, r0
 8003098:	d155      	bne.n	8003146 <_malloc_r+0xf2>
 800309a:	f8d8 4000 	ldr.w	r4, [r8]
 800309e:	4626      	mov	r6, r4
 80030a0:	2e00      	cmp	r6, #0
 80030a2:	d145      	bne.n	8003130 <_malloc_r+0xdc>
 80030a4:	2c00      	cmp	r4, #0
 80030a6:	d048      	beq.n	800313a <_malloc_r+0xe6>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	4631      	mov	r1, r6
 80030ac:	4638      	mov	r0, r7
 80030ae:	eb04 0903 	add.w	r9, r4, r3
 80030b2:	f000 fb61 	bl	8003778 <_sbrk_r>
 80030b6:	4581      	cmp	r9, r0
 80030b8:	d13f      	bne.n	800313a <_malloc_r+0xe6>
 80030ba:	6821      	ldr	r1, [r4, #0]
 80030bc:	4638      	mov	r0, r7
 80030be:	1a6d      	subs	r5, r5, r1
 80030c0:	4629      	mov	r1, r5
 80030c2:	f7ff ffa7 	bl	8003014 <sbrk_aligned>
 80030c6:	3001      	adds	r0, #1
 80030c8:	d037      	beq.n	800313a <_malloc_r+0xe6>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	442b      	add	r3, r5
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	f8d8 3000 	ldr.w	r3, [r8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d038      	beq.n	800314a <_malloc_r+0xf6>
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	42a2      	cmp	r2, r4
 80030dc:	d12b      	bne.n	8003136 <_malloc_r+0xe2>
 80030de:	2200      	movs	r2, #0
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e00f      	b.n	8003104 <_malloc_r+0xb0>
 80030e4:	6822      	ldr	r2, [r4, #0]
 80030e6:	1b52      	subs	r2, r2, r5
 80030e8:	d41f      	bmi.n	800312a <_malloc_r+0xd6>
 80030ea:	2a0b      	cmp	r2, #11
 80030ec:	d917      	bls.n	800311e <_malloc_r+0xca>
 80030ee:	1961      	adds	r1, r4, r5
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	6025      	str	r5, [r4, #0]
 80030f4:	bf18      	it	ne
 80030f6:	6059      	strne	r1, [r3, #4]
 80030f8:	6863      	ldr	r3, [r4, #4]
 80030fa:	bf08      	it	eq
 80030fc:	f8c8 1000 	streq.w	r1, [r8]
 8003100:	5162      	str	r2, [r4, r5]
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	4638      	mov	r0, r7
 8003106:	f104 060b 	add.w	r6, r4, #11
 800310a:	f000 f829 	bl	8003160 <__malloc_unlock>
 800310e:	f026 0607 	bic.w	r6, r6, #7
 8003112:	1d23      	adds	r3, r4, #4
 8003114:	1af2      	subs	r2, r6, r3
 8003116:	d0ae      	beq.n	8003076 <_malloc_r+0x22>
 8003118:	1b9b      	subs	r3, r3, r6
 800311a:	50a3      	str	r3, [r4, r2]
 800311c:	e7ab      	b.n	8003076 <_malloc_r+0x22>
 800311e:	42a3      	cmp	r3, r4
 8003120:	6862      	ldr	r2, [r4, #4]
 8003122:	d1dd      	bne.n	80030e0 <_malloc_r+0x8c>
 8003124:	f8c8 2000 	str.w	r2, [r8]
 8003128:	e7ec      	b.n	8003104 <_malloc_r+0xb0>
 800312a:	4623      	mov	r3, r4
 800312c:	6864      	ldr	r4, [r4, #4]
 800312e:	e7ac      	b.n	800308a <_malloc_r+0x36>
 8003130:	4634      	mov	r4, r6
 8003132:	6876      	ldr	r6, [r6, #4]
 8003134:	e7b4      	b.n	80030a0 <_malloc_r+0x4c>
 8003136:	4613      	mov	r3, r2
 8003138:	e7cc      	b.n	80030d4 <_malloc_r+0x80>
 800313a:	230c      	movs	r3, #12
 800313c:	4638      	mov	r0, r7
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	f000 f80e 	bl	8003160 <__malloc_unlock>
 8003144:	e797      	b.n	8003076 <_malloc_r+0x22>
 8003146:	6025      	str	r5, [r4, #0]
 8003148:	e7dc      	b.n	8003104 <_malloc_r+0xb0>
 800314a:	605b      	str	r3, [r3, #4]
 800314c:	deff      	udf	#255	; 0xff
 800314e:	bf00      	nop
 8003150:	20000400 	.word	0x20000400

08003154 <__malloc_lock>:
 8003154:	4801      	ldr	r0, [pc, #4]	; (800315c <__malloc_lock+0x8>)
 8003156:	f7ff bf13 	b.w	8002f80 <__retarget_lock_acquire_recursive>
 800315a:	bf00      	nop
 800315c:	200003fc 	.word	0x200003fc

08003160 <__malloc_unlock>:
 8003160:	4801      	ldr	r0, [pc, #4]	; (8003168 <__malloc_unlock+0x8>)
 8003162:	f7ff bf0e 	b.w	8002f82 <__retarget_lock_release_recursive>
 8003166:	bf00      	nop
 8003168:	200003fc 	.word	0x200003fc

0800316c <__ssputs_r>:
 800316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003170:	461f      	mov	r7, r3
 8003172:	688e      	ldr	r6, [r1, #8]
 8003174:	4682      	mov	sl, r0
 8003176:	42be      	cmp	r6, r7
 8003178:	460c      	mov	r4, r1
 800317a:	4690      	mov	r8, r2
 800317c:	680b      	ldr	r3, [r1, #0]
 800317e:	d82c      	bhi.n	80031da <__ssputs_r+0x6e>
 8003180:	898a      	ldrh	r2, [r1, #12]
 8003182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003186:	d026      	beq.n	80031d6 <__ssputs_r+0x6a>
 8003188:	6965      	ldr	r5, [r4, #20]
 800318a:	6909      	ldr	r1, [r1, #16]
 800318c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003190:	eba3 0901 	sub.w	r9, r3, r1
 8003194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003198:	1c7b      	adds	r3, r7, #1
 800319a:	444b      	add	r3, r9
 800319c:	106d      	asrs	r5, r5, #1
 800319e:	429d      	cmp	r5, r3
 80031a0:	bf38      	it	cc
 80031a2:	461d      	movcc	r5, r3
 80031a4:	0553      	lsls	r3, r2, #21
 80031a6:	d527      	bpl.n	80031f8 <__ssputs_r+0x8c>
 80031a8:	4629      	mov	r1, r5
 80031aa:	f7ff ff53 	bl	8003054 <_malloc_r>
 80031ae:	4606      	mov	r6, r0
 80031b0:	b360      	cbz	r0, 800320c <__ssputs_r+0xa0>
 80031b2:	464a      	mov	r2, r9
 80031b4:	6921      	ldr	r1, [r4, #16]
 80031b6:	f000 fafd 	bl	80037b4 <memcpy>
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c4:	81a3      	strh	r3, [r4, #12]
 80031c6:	6126      	str	r6, [r4, #16]
 80031c8:	444e      	add	r6, r9
 80031ca:	6026      	str	r6, [r4, #0]
 80031cc:	463e      	mov	r6, r7
 80031ce:	6165      	str	r5, [r4, #20]
 80031d0:	eba5 0509 	sub.w	r5, r5, r9
 80031d4:	60a5      	str	r5, [r4, #8]
 80031d6:	42be      	cmp	r6, r7
 80031d8:	d900      	bls.n	80031dc <__ssputs_r+0x70>
 80031da:	463e      	mov	r6, r7
 80031dc:	4632      	mov	r2, r6
 80031de:	4641      	mov	r1, r8
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	f000 faaf 	bl	8003744 <memmove>
 80031e6:	2000      	movs	r0, #0
 80031e8:	68a3      	ldr	r3, [r4, #8]
 80031ea:	1b9b      	subs	r3, r3, r6
 80031ec:	60a3      	str	r3, [r4, #8]
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	4433      	add	r3, r6
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f8:	462a      	mov	r2, r5
 80031fa:	f000 fae9 	bl	80037d0 <_realloc_r>
 80031fe:	4606      	mov	r6, r0
 8003200:	2800      	cmp	r0, #0
 8003202:	d1e0      	bne.n	80031c6 <__ssputs_r+0x5a>
 8003204:	4650      	mov	r0, sl
 8003206:	6921      	ldr	r1, [r4, #16]
 8003208:	f7ff febc 	bl	8002f84 <_free_r>
 800320c:	230c      	movs	r3, #12
 800320e:	f8ca 3000 	str.w	r3, [sl]
 8003212:	89a3      	ldrh	r3, [r4, #12]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800321c:	81a3      	strh	r3, [r4, #12]
 800321e:	e7e9      	b.n	80031f4 <__ssputs_r+0x88>

08003220 <_svfiprintf_r>:
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	4698      	mov	r8, r3
 8003226:	898b      	ldrh	r3, [r1, #12]
 8003228:	4607      	mov	r7, r0
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	460d      	mov	r5, r1
 800322e:	4614      	mov	r4, r2
 8003230:	b09d      	sub	sp, #116	; 0x74
 8003232:	d50e      	bpl.n	8003252 <_svfiprintf_r+0x32>
 8003234:	690b      	ldr	r3, [r1, #16]
 8003236:	b963      	cbnz	r3, 8003252 <_svfiprintf_r+0x32>
 8003238:	2140      	movs	r1, #64	; 0x40
 800323a:	f7ff ff0b 	bl	8003054 <_malloc_r>
 800323e:	6028      	str	r0, [r5, #0]
 8003240:	6128      	str	r0, [r5, #16]
 8003242:	b920      	cbnz	r0, 800324e <_svfiprintf_r+0x2e>
 8003244:	230c      	movs	r3, #12
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	e0d0      	b.n	80033f0 <_svfiprintf_r+0x1d0>
 800324e:	2340      	movs	r3, #64	; 0x40
 8003250:	616b      	str	r3, [r5, #20]
 8003252:	2300      	movs	r3, #0
 8003254:	9309      	str	r3, [sp, #36]	; 0x24
 8003256:	2320      	movs	r3, #32
 8003258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800325c:	2330      	movs	r3, #48	; 0x30
 800325e:	f04f 0901 	mov.w	r9, #1
 8003262:	f8cd 800c 	str.w	r8, [sp, #12]
 8003266:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003408 <_svfiprintf_r+0x1e8>
 800326a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800326e:	4623      	mov	r3, r4
 8003270:	469a      	mov	sl, r3
 8003272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003276:	b10a      	cbz	r2, 800327c <_svfiprintf_r+0x5c>
 8003278:	2a25      	cmp	r2, #37	; 0x25
 800327a:	d1f9      	bne.n	8003270 <_svfiprintf_r+0x50>
 800327c:	ebba 0b04 	subs.w	fp, sl, r4
 8003280:	d00b      	beq.n	800329a <_svfiprintf_r+0x7a>
 8003282:	465b      	mov	r3, fp
 8003284:	4622      	mov	r2, r4
 8003286:	4629      	mov	r1, r5
 8003288:	4638      	mov	r0, r7
 800328a:	f7ff ff6f 	bl	800316c <__ssputs_r>
 800328e:	3001      	adds	r0, #1
 8003290:	f000 80a9 	beq.w	80033e6 <_svfiprintf_r+0x1c6>
 8003294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003296:	445a      	add	r2, fp
 8003298:	9209      	str	r2, [sp, #36]	; 0x24
 800329a:	f89a 3000 	ldrb.w	r3, [sl]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80a1 	beq.w	80033e6 <_svfiprintf_r+0x1c6>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ae:	f10a 0a01 	add.w	sl, sl, #1
 80032b2:	9304      	str	r3, [sp, #16]
 80032b4:	9307      	str	r3, [sp, #28]
 80032b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032ba:	931a      	str	r3, [sp, #104]	; 0x68
 80032bc:	4654      	mov	r4, sl
 80032be:	2205      	movs	r2, #5
 80032c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c4:	4850      	ldr	r0, [pc, #320]	; (8003408 <_svfiprintf_r+0x1e8>)
 80032c6:	f000 fa67 	bl	8003798 <memchr>
 80032ca:	9a04      	ldr	r2, [sp, #16]
 80032cc:	b9d8      	cbnz	r0, 8003306 <_svfiprintf_r+0xe6>
 80032ce:	06d0      	lsls	r0, r2, #27
 80032d0:	bf44      	itt	mi
 80032d2:	2320      	movmi	r3, #32
 80032d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032d8:	0711      	lsls	r1, r2, #28
 80032da:	bf44      	itt	mi
 80032dc:	232b      	movmi	r3, #43	; 0x2b
 80032de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032e2:	f89a 3000 	ldrb.w	r3, [sl]
 80032e6:	2b2a      	cmp	r3, #42	; 0x2a
 80032e8:	d015      	beq.n	8003316 <_svfiprintf_r+0xf6>
 80032ea:	4654      	mov	r4, sl
 80032ec:	2000      	movs	r0, #0
 80032ee:	f04f 0c0a 	mov.w	ip, #10
 80032f2:	9a07      	ldr	r2, [sp, #28]
 80032f4:	4621      	mov	r1, r4
 80032f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032fa:	3b30      	subs	r3, #48	; 0x30
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d94d      	bls.n	800339c <_svfiprintf_r+0x17c>
 8003300:	b1b0      	cbz	r0, 8003330 <_svfiprintf_r+0x110>
 8003302:	9207      	str	r2, [sp, #28]
 8003304:	e014      	b.n	8003330 <_svfiprintf_r+0x110>
 8003306:	eba0 0308 	sub.w	r3, r0, r8
 800330a:	fa09 f303 	lsl.w	r3, r9, r3
 800330e:	4313      	orrs	r3, r2
 8003310:	46a2      	mov	sl, r4
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	e7d2      	b.n	80032bc <_svfiprintf_r+0x9c>
 8003316:	9b03      	ldr	r3, [sp, #12]
 8003318:	1d19      	adds	r1, r3, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	9103      	str	r1, [sp, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfbb      	ittet	lt
 8003322:	425b      	neglt	r3, r3
 8003324:	f042 0202 	orrlt.w	r2, r2, #2
 8003328:	9307      	strge	r3, [sp, #28]
 800332a:	9307      	strlt	r3, [sp, #28]
 800332c:	bfb8      	it	lt
 800332e:	9204      	strlt	r2, [sp, #16]
 8003330:	7823      	ldrb	r3, [r4, #0]
 8003332:	2b2e      	cmp	r3, #46	; 0x2e
 8003334:	d10c      	bne.n	8003350 <_svfiprintf_r+0x130>
 8003336:	7863      	ldrb	r3, [r4, #1]
 8003338:	2b2a      	cmp	r3, #42	; 0x2a
 800333a:	d134      	bne.n	80033a6 <_svfiprintf_r+0x186>
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	3402      	adds	r4, #2
 8003340:	1d1a      	adds	r2, r3, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	9203      	str	r2, [sp, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	bfb8      	it	lt
 800334a:	f04f 33ff 	movlt.w	r3, #4294967295
 800334e:	9305      	str	r3, [sp, #20]
 8003350:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800340c <_svfiprintf_r+0x1ec>
 8003354:	2203      	movs	r2, #3
 8003356:	4650      	mov	r0, sl
 8003358:	7821      	ldrb	r1, [r4, #0]
 800335a:	f000 fa1d 	bl	8003798 <memchr>
 800335e:	b138      	cbz	r0, 8003370 <_svfiprintf_r+0x150>
 8003360:	2240      	movs	r2, #64	; 0x40
 8003362:	9b04      	ldr	r3, [sp, #16]
 8003364:	eba0 000a 	sub.w	r0, r0, sl
 8003368:	4082      	lsls	r2, r0
 800336a:	4313      	orrs	r3, r2
 800336c:	3401      	adds	r4, #1
 800336e:	9304      	str	r3, [sp, #16]
 8003370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003374:	2206      	movs	r2, #6
 8003376:	4826      	ldr	r0, [pc, #152]	; (8003410 <_svfiprintf_r+0x1f0>)
 8003378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800337c:	f000 fa0c 	bl	8003798 <memchr>
 8003380:	2800      	cmp	r0, #0
 8003382:	d038      	beq.n	80033f6 <_svfiprintf_r+0x1d6>
 8003384:	4b23      	ldr	r3, [pc, #140]	; (8003414 <_svfiprintf_r+0x1f4>)
 8003386:	bb1b      	cbnz	r3, 80033d0 <_svfiprintf_r+0x1b0>
 8003388:	9b03      	ldr	r3, [sp, #12]
 800338a:	3307      	adds	r3, #7
 800338c:	f023 0307 	bic.w	r3, r3, #7
 8003390:	3308      	adds	r3, #8
 8003392:	9303      	str	r3, [sp, #12]
 8003394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003396:	4433      	add	r3, r6
 8003398:	9309      	str	r3, [sp, #36]	; 0x24
 800339a:	e768      	b.n	800326e <_svfiprintf_r+0x4e>
 800339c:	460c      	mov	r4, r1
 800339e:	2001      	movs	r0, #1
 80033a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80033a4:	e7a6      	b.n	80032f4 <_svfiprintf_r+0xd4>
 80033a6:	2300      	movs	r3, #0
 80033a8:	f04f 0c0a 	mov.w	ip, #10
 80033ac:	4619      	mov	r1, r3
 80033ae:	3401      	adds	r4, #1
 80033b0:	9305      	str	r3, [sp, #20]
 80033b2:	4620      	mov	r0, r4
 80033b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033b8:	3a30      	subs	r2, #48	; 0x30
 80033ba:	2a09      	cmp	r2, #9
 80033bc:	d903      	bls.n	80033c6 <_svfiprintf_r+0x1a6>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0c6      	beq.n	8003350 <_svfiprintf_r+0x130>
 80033c2:	9105      	str	r1, [sp, #20]
 80033c4:	e7c4      	b.n	8003350 <_svfiprintf_r+0x130>
 80033c6:	4604      	mov	r4, r0
 80033c8:	2301      	movs	r3, #1
 80033ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ce:	e7f0      	b.n	80033b2 <_svfiprintf_r+0x192>
 80033d0:	ab03      	add	r3, sp, #12
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	462a      	mov	r2, r5
 80033d6:	4638      	mov	r0, r7
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <_svfiprintf_r+0x1f8>)
 80033da:	a904      	add	r1, sp, #16
 80033dc:	f3af 8000 	nop.w
 80033e0:	1c42      	adds	r2, r0, #1
 80033e2:	4606      	mov	r6, r0
 80033e4:	d1d6      	bne.n	8003394 <_svfiprintf_r+0x174>
 80033e6:	89ab      	ldrh	r3, [r5, #12]
 80033e8:	065b      	lsls	r3, r3, #25
 80033ea:	f53f af2d 	bmi.w	8003248 <_svfiprintf_r+0x28>
 80033ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033f0:	b01d      	add	sp, #116	; 0x74
 80033f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f6:	ab03      	add	r3, sp, #12
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	462a      	mov	r2, r5
 80033fc:	4638      	mov	r0, r7
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <_svfiprintf_r+0x1f8>)
 8003400:	a904      	add	r1, sp, #16
 8003402:	f000 f87d 	bl	8003500 <_printf_i>
 8003406:	e7eb      	b.n	80033e0 <_svfiprintf_r+0x1c0>
 8003408:	0800391e 	.word	0x0800391e
 800340c:	08003924 	.word	0x08003924
 8003410:	08003928 	.word	0x08003928
 8003414:	00000000 	.word	0x00000000
 8003418:	0800316d 	.word	0x0800316d

0800341c <_printf_common>:
 800341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003420:	4616      	mov	r6, r2
 8003422:	4699      	mov	r9, r3
 8003424:	688a      	ldr	r2, [r1, #8]
 8003426:	690b      	ldr	r3, [r1, #16]
 8003428:	4607      	mov	r7, r0
 800342a:	4293      	cmp	r3, r2
 800342c:	bfb8      	it	lt
 800342e:	4613      	movlt	r3, r2
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003436:	460c      	mov	r4, r1
 8003438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800343c:	b10a      	cbz	r2, 8003442 <_printf_common+0x26>
 800343e:	3301      	adds	r3, #1
 8003440:	6033      	str	r3, [r6, #0]
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	0699      	lsls	r1, r3, #26
 8003446:	bf42      	ittt	mi
 8003448:	6833      	ldrmi	r3, [r6, #0]
 800344a:	3302      	addmi	r3, #2
 800344c:	6033      	strmi	r3, [r6, #0]
 800344e:	6825      	ldr	r5, [r4, #0]
 8003450:	f015 0506 	ands.w	r5, r5, #6
 8003454:	d106      	bne.n	8003464 <_printf_common+0x48>
 8003456:	f104 0a19 	add.w	sl, r4, #25
 800345a:	68e3      	ldr	r3, [r4, #12]
 800345c:	6832      	ldr	r2, [r6, #0]
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	42ab      	cmp	r3, r5
 8003462:	dc2b      	bgt.n	80034bc <_printf_common+0xa0>
 8003464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003468:	1e13      	subs	r3, r2, #0
 800346a:	6822      	ldr	r2, [r4, #0]
 800346c:	bf18      	it	ne
 800346e:	2301      	movne	r3, #1
 8003470:	0692      	lsls	r2, r2, #26
 8003472:	d430      	bmi.n	80034d6 <_printf_common+0xba>
 8003474:	4649      	mov	r1, r9
 8003476:	4638      	mov	r0, r7
 8003478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800347c:	47c0      	blx	r8
 800347e:	3001      	adds	r0, #1
 8003480:	d023      	beq.n	80034ca <_printf_common+0xae>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	6922      	ldr	r2, [r4, #16]
 8003486:	f003 0306 	and.w	r3, r3, #6
 800348a:	2b04      	cmp	r3, #4
 800348c:	bf14      	ite	ne
 800348e:	2500      	movne	r5, #0
 8003490:	6833      	ldreq	r3, [r6, #0]
 8003492:	f04f 0600 	mov.w	r6, #0
 8003496:	bf08      	it	eq
 8003498:	68e5      	ldreq	r5, [r4, #12]
 800349a:	f104 041a 	add.w	r4, r4, #26
 800349e:	bf08      	it	eq
 80034a0:	1aed      	subeq	r5, r5, r3
 80034a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034a6:	bf08      	it	eq
 80034a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034ac:	4293      	cmp	r3, r2
 80034ae:	bfc4      	itt	gt
 80034b0:	1a9b      	subgt	r3, r3, r2
 80034b2:	18ed      	addgt	r5, r5, r3
 80034b4:	42b5      	cmp	r5, r6
 80034b6:	d11a      	bne.n	80034ee <_printf_common+0xd2>
 80034b8:	2000      	movs	r0, #0
 80034ba:	e008      	b.n	80034ce <_printf_common+0xb2>
 80034bc:	2301      	movs	r3, #1
 80034be:	4652      	mov	r2, sl
 80034c0:	4649      	mov	r1, r9
 80034c2:	4638      	mov	r0, r7
 80034c4:	47c0      	blx	r8
 80034c6:	3001      	adds	r0, #1
 80034c8:	d103      	bne.n	80034d2 <_printf_common+0xb6>
 80034ca:	f04f 30ff 	mov.w	r0, #4294967295
 80034ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d2:	3501      	adds	r5, #1
 80034d4:	e7c1      	b.n	800345a <_printf_common+0x3e>
 80034d6:	2030      	movs	r0, #48	; 0x30
 80034d8:	18e1      	adds	r1, r4, r3
 80034da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034e4:	4422      	add	r2, r4
 80034e6:	3302      	adds	r3, #2
 80034e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034ec:	e7c2      	b.n	8003474 <_printf_common+0x58>
 80034ee:	2301      	movs	r3, #1
 80034f0:	4622      	mov	r2, r4
 80034f2:	4649      	mov	r1, r9
 80034f4:	4638      	mov	r0, r7
 80034f6:	47c0      	blx	r8
 80034f8:	3001      	adds	r0, #1
 80034fa:	d0e6      	beq.n	80034ca <_printf_common+0xae>
 80034fc:	3601      	adds	r6, #1
 80034fe:	e7d9      	b.n	80034b4 <_printf_common+0x98>

08003500 <_printf_i>:
 8003500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	7e0f      	ldrb	r7, [r1, #24]
 8003506:	4691      	mov	r9, r2
 8003508:	2f78      	cmp	r7, #120	; 0x78
 800350a:	4680      	mov	r8, r0
 800350c:	460c      	mov	r4, r1
 800350e:	469a      	mov	sl, r3
 8003510:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003516:	d807      	bhi.n	8003528 <_printf_i+0x28>
 8003518:	2f62      	cmp	r7, #98	; 0x62
 800351a:	d80a      	bhi.n	8003532 <_printf_i+0x32>
 800351c:	2f00      	cmp	r7, #0
 800351e:	f000 80d5 	beq.w	80036cc <_printf_i+0x1cc>
 8003522:	2f58      	cmp	r7, #88	; 0x58
 8003524:	f000 80c1 	beq.w	80036aa <_printf_i+0x1aa>
 8003528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800352c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003530:	e03a      	b.n	80035a8 <_printf_i+0xa8>
 8003532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003536:	2b15      	cmp	r3, #21
 8003538:	d8f6      	bhi.n	8003528 <_printf_i+0x28>
 800353a:	a101      	add	r1, pc, #4	; (adr r1, 8003540 <_printf_i+0x40>)
 800353c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003540:	08003599 	.word	0x08003599
 8003544:	080035ad 	.word	0x080035ad
 8003548:	08003529 	.word	0x08003529
 800354c:	08003529 	.word	0x08003529
 8003550:	08003529 	.word	0x08003529
 8003554:	08003529 	.word	0x08003529
 8003558:	080035ad 	.word	0x080035ad
 800355c:	08003529 	.word	0x08003529
 8003560:	08003529 	.word	0x08003529
 8003564:	08003529 	.word	0x08003529
 8003568:	08003529 	.word	0x08003529
 800356c:	080036b3 	.word	0x080036b3
 8003570:	080035d9 	.word	0x080035d9
 8003574:	0800366d 	.word	0x0800366d
 8003578:	08003529 	.word	0x08003529
 800357c:	08003529 	.word	0x08003529
 8003580:	080036d5 	.word	0x080036d5
 8003584:	08003529 	.word	0x08003529
 8003588:	080035d9 	.word	0x080035d9
 800358c:	08003529 	.word	0x08003529
 8003590:	08003529 	.word	0x08003529
 8003594:	08003675 	.word	0x08003675
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	1d1a      	adds	r2, r3, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	602a      	str	r2, [r5, #0]
 80035a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0a0      	b.n	80036ee <_printf_i+0x1ee>
 80035ac:	6820      	ldr	r0, [r4, #0]
 80035ae:	682b      	ldr	r3, [r5, #0]
 80035b0:	0607      	lsls	r7, r0, #24
 80035b2:	f103 0104 	add.w	r1, r3, #4
 80035b6:	6029      	str	r1, [r5, #0]
 80035b8:	d501      	bpl.n	80035be <_printf_i+0xbe>
 80035ba:	681e      	ldr	r6, [r3, #0]
 80035bc:	e003      	b.n	80035c6 <_printf_i+0xc6>
 80035be:	0646      	lsls	r6, r0, #25
 80035c0:	d5fb      	bpl.n	80035ba <_printf_i+0xba>
 80035c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	da03      	bge.n	80035d2 <_printf_i+0xd2>
 80035ca:	232d      	movs	r3, #45	; 0x2d
 80035cc:	4276      	negs	r6, r6
 80035ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d2:	230a      	movs	r3, #10
 80035d4:	4859      	ldr	r0, [pc, #356]	; (800373c <_printf_i+0x23c>)
 80035d6:	e012      	b.n	80035fe <_printf_i+0xfe>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	6820      	ldr	r0, [r4, #0]
 80035dc:	1d19      	adds	r1, r3, #4
 80035de:	6029      	str	r1, [r5, #0]
 80035e0:	0605      	lsls	r5, r0, #24
 80035e2:	d501      	bpl.n	80035e8 <_printf_i+0xe8>
 80035e4:	681e      	ldr	r6, [r3, #0]
 80035e6:	e002      	b.n	80035ee <_printf_i+0xee>
 80035e8:	0641      	lsls	r1, r0, #25
 80035ea:	d5fb      	bpl.n	80035e4 <_printf_i+0xe4>
 80035ec:	881e      	ldrh	r6, [r3, #0]
 80035ee:	2f6f      	cmp	r7, #111	; 0x6f
 80035f0:	bf0c      	ite	eq
 80035f2:	2308      	moveq	r3, #8
 80035f4:	230a      	movne	r3, #10
 80035f6:	4851      	ldr	r0, [pc, #324]	; (800373c <_printf_i+0x23c>)
 80035f8:	2100      	movs	r1, #0
 80035fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035fe:	6865      	ldr	r5, [r4, #4]
 8003600:	2d00      	cmp	r5, #0
 8003602:	bfa8      	it	ge
 8003604:	6821      	ldrge	r1, [r4, #0]
 8003606:	60a5      	str	r5, [r4, #8]
 8003608:	bfa4      	itt	ge
 800360a:	f021 0104 	bicge.w	r1, r1, #4
 800360e:	6021      	strge	r1, [r4, #0]
 8003610:	b90e      	cbnz	r6, 8003616 <_printf_i+0x116>
 8003612:	2d00      	cmp	r5, #0
 8003614:	d04b      	beq.n	80036ae <_printf_i+0x1ae>
 8003616:	4615      	mov	r5, r2
 8003618:	fbb6 f1f3 	udiv	r1, r6, r3
 800361c:	fb03 6711 	mls	r7, r3, r1, r6
 8003620:	5dc7      	ldrb	r7, [r0, r7]
 8003622:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003626:	4637      	mov	r7, r6
 8003628:	42bb      	cmp	r3, r7
 800362a:	460e      	mov	r6, r1
 800362c:	d9f4      	bls.n	8003618 <_printf_i+0x118>
 800362e:	2b08      	cmp	r3, #8
 8003630:	d10b      	bne.n	800364a <_printf_i+0x14a>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	07de      	lsls	r6, r3, #31
 8003636:	d508      	bpl.n	800364a <_printf_i+0x14a>
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	6861      	ldr	r1, [r4, #4]
 800363c:	4299      	cmp	r1, r3
 800363e:	bfde      	ittt	le
 8003640:	2330      	movle	r3, #48	; 0x30
 8003642:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003646:	f105 35ff 	addle.w	r5, r5, #4294967295
 800364a:	1b52      	subs	r2, r2, r5
 800364c:	6122      	str	r2, [r4, #16]
 800364e:	464b      	mov	r3, r9
 8003650:	4621      	mov	r1, r4
 8003652:	4640      	mov	r0, r8
 8003654:	f8cd a000 	str.w	sl, [sp]
 8003658:	aa03      	add	r2, sp, #12
 800365a:	f7ff fedf 	bl	800341c <_printf_common>
 800365e:	3001      	adds	r0, #1
 8003660:	d14a      	bne.n	80036f8 <_printf_i+0x1f8>
 8003662:	f04f 30ff 	mov.w	r0, #4294967295
 8003666:	b004      	add	sp, #16
 8003668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	6023      	str	r3, [r4, #0]
 8003674:	2778      	movs	r7, #120	; 0x78
 8003676:	4832      	ldr	r0, [pc, #200]	; (8003740 <_printf_i+0x240>)
 8003678:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	6829      	ldr	r1, [r5, #0]
 8003680:	061f      	lsls	r7, r3, #24
 8003682:	f851 6b04 	ldr.w	r6, [r1], #4
 8003686:	d402      	bmi.n	800368e <_printf_i+0x18e>
 8003688:	065f      	lsls	r7, r3, #25
 800368a:	bf48      	it	mi
 800368c:	b2b6      	uxthmi	r6, r6
 800368e:	07df      	lsls	r7, r3, #31
 8003690:	bf48      	it	mi
 8003692:	f043 0320 	orrmi.w	r3, r3, #32
 8003696:	6029      	str	r1, [r5, #0]
 8003698:	bf48      	it	mi
 800369a:	6023      	strmi	r3, [r4, #0]
 800369c:	b91e      	cbnz	r6, 80036a6 <_printf_i+0x1a6>
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f023 0320 	bic.w	r3, r3, #32
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	2310      	movs	r3, #16
 80036a8:	e7a6      	b.n	80035f8 <_printf_i+0xf8>
 80036aa:	4824      	ldr	r0, [pc, #144]	; (800373c <_printf_i+0x23c>)
 80036ac:	e7e4      	b.n	8003678 <_printf_i+0x178>
 80036ae:	4615      	mov	r5, r2
 80036b0:	e7bd      	b.n	800362e <_printf_i+0x12e>
 80036b2:	682b      	ldr	r3, [r5, #0]
 80036b4:	6826      	ldr	r6, [r4, #0]
 80036b6:	1d18      	adds	r0, r3, #4
 80036b8:	6961      	ldr	r1, [r4, #20]
 80036ba:	6028      	str	r0, [r5, #0]
 80036bc:	0635      	lsls	r5, r6, #24
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	d501      	bpl.n	80036c6 <_printf_i+0x1c6>
 80036c2:	6019      	str	r1, [r3, #0]
 80036c4:	e002      	b.n	80036cc <_printf_i+0x1cc>
 80036c6:	0670      	lsls	r0, r6, #25
 80036c8:	d5fb      	bpl.n	80036c2 <_printf_i+0x1c2>
 80036ca:	8019      	strh	r1, [r3, #0]
 80036cc:	2300      	movs	r3, #0
 80036ce:	4615      	mov	r5, r2
 80036d0:	6123      	str	r3, [r4, #16]
 80036d2:	e7bc      	b.n	800364e <_printf_i+0x14e>
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	2100      	movs	r1, #0
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	602a      	str	r2, [r5, #0]
 80036dc:	681d      	ldr	r5, [r3, #0]
 80036de:	6862      	ldr	r2, [r4, #4]
 80036e0:	4628      	mov	r0, r5
 80036e2:	f000 f859 	bl	8003798 <memchr>
 80036e6:	b108      	cbz	r0, 80036ec <_printf_i+0x1ec>
 80036e8:	1b40      	subs	r0, r0, r5
 80036ea:	6060      	str	r0, [r4, #4]
 80036ec:	6863      	ldr	r3, [r4, #4]
 80036ee:	6123      	str	r3, [r4, #16]
 80036f0:	2300      	movs	r3, #0
 80036f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036f6:	e7aa      	b.n	800364e <_printf_i+0x14e>
 80036f8:	462a      	mov	r2, r5
 80036fa:	4649      	mov	r1, r9
 80036fc:	4640      	mov	r0, r8
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	47d0      	blx	sl
 8003702:	3001      	adds	r0, #1
 8003704:	d0ad      	beq.n	8003662 <_printf_i+0x162>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	079b      	lsls	r3, r3, #30
 800370a:	d413      	bmi.n	8003734 <_printf_i+0x234>
 800370c:	68e0      	ldr	r0, [r4, #12]
 800370e:	9b03      	ldr	r3, [sp, #12]
 8003710:	4298      	cmp	r0, r3
 8003712:	bfb8      	it	lt
 8003714:	4618      	movlt	r0, r3
 8003716:	e7a6      	b.n	8003666 <_printf_i+0x166>
 8003718:	2301      	movs	r3, #1
 800371a:	4632      	mov	r2, r6
 800371c:	4649      	mov	r1, r9
 800371e:	4640      	mov	r0, r8
 8003720:	47d0      	blx	sl
 8003722:	3001      	adds	r0, #1
 8003724:	d09d      	beq.n	8003662 <_printf_i+0x162>
 8003726:	3501      	adds	r5, #1
 8003728:	68e3      	ldr	r3, [r4, #12]
 800372a:	9903      	ldr	r1, [sp, #12]
 800372c:	1a5b      	subs	r3, r3, r1
 800372e:	42ab      	cmp	r3, r5
 8003730:	dcf2      	bgt.n	8003718 <_printf_i+0x218>
 8003732:	e7eb      	b.n	800370c <_printf_i+0x20c>
 8003734:	2500      	movs	r5, #0
 8003736:	f104 0619 	add.w	r6, r4, #25
 800373a:	e7f5      	b.n	8003728 <_printf_i+0x228>
 800373c:	0800392f 	.word	0x0800392f
 8003740:	08003940 	.word	0x08003940

08003744 <memmove>:
 8003744:	4288      	cmp	r0, r1
 8003746:	b510      	push	{r4, lr}
 8003748:	eb01 0402 	add.w	r4, r1, r2
 800374c:	d902      	bls.n	8003754 <memmove+0x10>
 800374e:	4284      	cmp	r4, r0
 8003750:	4623      	mov	r3, r4
 8003752:	d807      	bhi.n	8003764 <memmove+0x20>
 8003754:	1e43      	subs	r3, r0, #1
 8003756:	42a1      	cmp	r1, r4
 8003758:	d008      	beq.n	800376c <memmove+0x28>
 800375a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800375e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003762:	e7f8      	b.n	8003756 <memmove+0x12>
 8003764:	4601      	mov	r1, r0
 8003766:	4402      	add	r2, r0
 8003768:	428a      	cmp	r2, r1
 800376a:	d100      	bne.n	800376e <memmove+0x2a>
 800376c:	bd10      	pop	{r4, pc}
 800376e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003776:	e7f7      	b.n	8003768 <memmove+0x24>

08003778 <_sbrk_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	2300      	movs	r3, #0
 800377c:	4d05      	ldr	r5, [pc, #20]	; (8003794 <_sbrk_r+0x1c>)
 800377e:	4604      	mov	r4, r0
 8003780:	4608      	mov	r0, r1
 8003782:	602b      	str	r3, [r5, #0]
 8003784:	f7fd fb32 	bl	8000dec <_sbrk>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_sbrk_r+0x1a>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	b103      	cbz	r3, 8003792 <_sbrk_r+0x1a>
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	200003f8 	.word	0x200003f8

08003798 <memchr>:
 8003798:	4603      	mov	r3, r0
 800379a:	b510      	push	{r4, lr}
 800379c:	b2c9      	uxtb	r1, r1
 800379e:	4402      	add	r2, r0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	d101      	bne.n	80037aa <memchr+0x12>
 80037a6:	2000      	movs	r0, #0
 80037a8:	e003      	b.n	80037b2 <memchr+0x1a>
 80037aa:	7804      	ldrb	r4, [r0, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	428c      	cmp	r4, r1
 80037b0:	d1f6      	bne.n	80037a0 <memchr+0x8>
 80037b2:	bd10      	pop	{r4, pc}

080037b4 <memcpy>:
 80037b4:	440a      	add	r2, r1
 80037b6:	4291      	cmp	r1, r2
 80037b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037bc:	d100      	bne.n	80037c0 <memcpy+0xc>
 80037be:	4770      	bx	lr
 80037c0:	b510      	push	{r4, lr}
 80037c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037c6:	4291      	cmp	r1, r2
 80037c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037cc:	d1f9      	bne.n	80037c2 <memcpy+0xe>
 80037ce:	bd10      	pop	{r4, pc}

080037d0 <_realloc_r>:
 80037d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d4:	4680      	mov	r8, r0
 80037d6:	4614      	mov	r4, r2
 80037d8:	460e      	mov	r6, r1
 80037da:	b921      	cbnz	r1, 80037e6 <_realloc_r+0x16>
 80037dc:	4611      	mov	r1, r2
 80037de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037e2:	f7ff bc37 	b.w	8003054 <_malloc_r>
 80037e6:	b92a      	cbnz	r2, 80037f4 <_realloc_r+0x24>
 80037e8:	f7ff fbcc 	bl	8002f84 <_free_r>
 80037ec:	4625      	mov	r5, r4
 80037ee:	4628      	mov	r0, r5
 80037f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f4:	f000 f81b 	bl	800382e <_malloc_usable_size_r>
 80037f8:	4284      	cmp	r4, r0
 80037fa:	4607      	mov	r7, r0
 80037fc:	d802      	bhi.n	8003804 <_realloc_r+0x34>
 80037fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003802:	d812      	bhi.n	800382a <_realloc_r+0x5a>
 8003804:	4621      	mov	r1, r4
 8003806:	4640      	mov	r0, r8
 8003808:	f7ff fc24 	bl	8003054 <_malloc_r>
 800380c:	4605      	mov	r5, r0
 800380e:	2800      	cmp	r0, #0
 8003810:	d0ed      	beq.n	80037ee <_realloc_r+0x1e>
 8003812:	42bc      	cmp	r4, r7
 8003814:	4622      	mov	r2, r4
 8003816:	4631      	mov	r1, r6
 8003818:	bf28      	it	cs
 800381a:	463a      	movcs	r2, r7
 800381c:	f7ff ffca 	bl	80037b4 <memcpy>
 8003820:	4631      	mov	r1, r6
 8003822:	4640      	mov	r0, r8
 8003824:	f7ff fbae 	bl	8002f84 <_free_r>
 8003828:	e7e1      	b.n	80037ee <_realloc_r+0x1e>
 800382a:	4635      	mov	r5, r6
 800382c:	e7df      	b.n	80037ee <_realloc_r+0x1e>

0800382e <_malloc_usable_size_r>:
 800382e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003832:	1f18      	subs	r0, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	bfbc      	itt	lt
 8003838:	580b      	ldrlt	r3, [r1, r0]
 800383a:	18c0      	addlt	r0, r0, r3
 800383c:	4770      	bx	lr
	...

08003840 <_init>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	bf00      	nop
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr

0800384c <_fini>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	bf00      	nop
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr
